// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/**
 * This application displays documentation generated by the docgen tool
 * found at dart-repo/dart/pkg/docgen.
 *
 * The Yaml file outputted by the docgen tool will be read in to
 * generate [Page] and [Category] and [CompositeContainer].
 * Pages, Categories and CategoryItems are used to format and layout the page.
 */
// TODO(janicejl): Add a link to the dart docgen landing page in future.
library web.app;

import 'dart:html' show Element, querySelector, window, ScrollAlignment,
    Event, AnchorElement;

import 'package:polymer/polymer.dart';

import 'shared.dart';
import 'viewer.dart';

import 'package:dartdoc_viewer/location.dart';

/// The [Viewer] object being displayed.
final Viewer viewer = new Viewer();


/// The path of this app on startup.
String _pathname;

/// The latest url reached by a popState event.
String location;

/// The google crawler will try to translate #! anchors into query parameters
/// with an _escaped_fragment_ in front of them. Assume that's the only query
/// parameter.
const _ESCAPED_FRAGMENT = '?_escaped_fragment_=';

/// From the URL, determine what location it corresponds to. We will
/// accept hashes that start with [AJAX_LOCATION_PREFIX],
/// [BASIC_LOCATION_PREFIX], and [_ESCAPED_FRAGMENT].
String findLocation() {
  var hash = window.location.hash;
  var query = window.location.search;
  if (query.startsWith(_ESCAPED_FRAGMENT)) {
    return query.substring(_ESCAPED_FRAGMENT.length, query.length);
  } else {
    return locationDeprefixed(hash);
  }
}

/// Listens for browser navigation and acts accordingly.
void startHistory() {
  location = findLocation();
  windowLocation.changes.listen(navigate);
}

void navigate(event) {
  // TODO(alanknight): Should we be URI encoding/decoding this?
  var newLocation = findLocation();
  if (viewer.homePage != null) {
    viewer.handleLink(newLocation);
  }
}

/// Handles browser navigation.
@initMethod
void initApp() {
  window.onResize.listen((event) {
    viewer.isDesktop = window.innerWidth > DESKTOP_SIZE_BOUNDARY;
    dartdocMain.collapseSearchAndOptionsIfNeeded();
    dartdocMain.hideOrShowNavigation();
  });

  Polymer.onReady.then((_) {
    dartdocMain.hideOrShowNavigation();
  });

  startHistory();
  // If a user navigates to a page other than the homepage, the viewer
  // must first load fully before navigating to the specified page.
  viewer.finished.then((_) {
    if (location != null && location != '') {
      viewer.handleLink(location);
    } else {
      viewer.currentPage = viewer.startPage;
    }
  });
}

{"name":"Uri","qualifiedName":"dart-core.Uri","comment":"<p>A parsed URI, such as a URL.</p>\n<p><strong>See also:</strong></p><ul><li><a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-uri\">URIs</a> in the <a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\">library tour</a></li><li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC-3986</a></li></ul>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"_ASTERISK":{"name":"_ASTERISK","qualifiedName":"dart-core.Uri._ASTERISK","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_AT_SIGN":{"name":"_AT_SIGN","qualifiedName":"dart-core.Uri._AT_SIGN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_BACKSLASH":{"name":"_BACKSLASH","qualifiedName":"dart-core.Uri._BACKSLASH","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_BAR":{"name":"_BAR","qualifiedName":"dart-core.Uri._BAR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_COLON":{"name":"_COLON","qualifiedName":"dart-core.Uri._COLON","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_DOUBLE_QUOTE":{"name":"_DOUBLE_QUOTE","qualifiedName":"dart-core.Uri._DOUBLE_QUOTE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_GREATER":{"name":"_GREATER","qualifiedName":"dart-core.Uri._GREATER","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_LEFT_BRACKET":{"name":"_LEFT_BRACKET","qualifiedName":"dart-core.Uri._LEFT_BRACKET","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_LESS":{"name":"_LESS","qualifiedName":"dart-core.Uri._LESS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_LOWER_CASE_A":{"name":"_LOWER_CASE_A","qualifiedName":"dart-core.Uri._LOWER_CASE_A","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_LOWER_CASE_F":{"name":"_LOWER_CASE_F","qualifiedName":"dart-core.Uri._LOWER_CASE_F","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_LOWER_CASE_Z":{"name":"_LOWER_CASE_Z","qualifiedName":"dart-core.Uri._LOWER_CASE_Z","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_NINE":{"name":"_NINE","qualifiedName":"dart-core.Uri._NINE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_NUMBER_SIGN":{"name":"_NUMBER_SIGN","qualifiedName":"dart-core.Uri._NUMBER_SIGN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_PERCENT":{"name":"_PERCENT","qualifiedName":"dart-core.Uri._PERCENT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_PLUS":{"name":"_PLUS","qualifiedName":"dart-core.Uri._PLUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_QUESTION":{"name":"_QUESTION","qualifiedName":"dart-core.Uri._QUESTION","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_RIGHT_BRACKET":{"name":"_RIGHT_BRACKET","qualifiedName":"dart-core.Uri._RIGHT_BRACKET","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_SLASH":{"name":"_SLASH","qualifiedName":"dart-core.Uri._SLASH","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_SPACE":{"name":"_SPACE","qualifiedName":"dart-core.Uri._SPACE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_UPPER_CASE_A":{"name":"_UPPER_CASE_A","qualifiedName":"dart-core.Uri._UPPER_CASE_A","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_UPPER_CASE_F":{"name":"_UPPER_CASE_F","qualifiedName":"dart-core.Uri._UPPER_CASE_F","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_UPPER_CASE_Z":{"name":"_UPPER_CASE_Z","qualifiedName":"dart-core.Uri._UPPER_CASE_Z","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_ZERO":{"name":"_ZERO","qualifiedName":"dart-core.Uri._ZERO","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_encodeFullTable":{"name":"_encodeFullTable","qualifiedName":"dart-core.Uri._encodeFullTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_fragment":{"name":"_fragment","qualifiedName":"dart-core.Uri._fragment","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_genDelimitersTable":{"name":"_genDelimitersTable","qualifiedName":"dart-core.Uri._genDelimitersTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_host":{"name":"_host","qualifiedName":"dart-core.Uri._host","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_path":{"name":"_path","qualifiedName":"dart-core.Uri._path","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_pathCharOrSlashTable":{"name":"_pathCharOrSlashTable","qualifiedName":"dart-core.Uri._pathCharOrSlashTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_pathCharTable":{"name":"_pathCharTable","qualifiedName":"dart-core.Uri._pathCharTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_pathSegments":{"name":"_pathSegments","qualifiedName":"dart-core.Uri._pathSegments","comment":"<p>Cache the computed return value of pathSegements.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_port":{"name":"_port","qualifiedName":"dart-core.Uri._port","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_query":{"name":"_query","qualifiedName":"dart-core.Uri._query","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_queryCharTable":{"name":"_queryCharTable","qualifiedName":"dart-core.Uri._queryCharTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_queryParameters":{"name":"_queryParameters","qualifiedName":"dart-core.Uri._queryParameters","comment":"<p>Cache the computed return value of <a>dart-core.Uri.queryParameters</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_regNameTable":{"name":"_regNameTable","qualifiedName":"dart-core.Uri._regNameTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_schemeLowerTable":{"name":"_schemeLowerTable","qualifiedName":"dart-core.Uri._schemeLowerTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_schemeTable":{"name":"_schemeTable","qualifiedName":"dart-core.Uri._schemeTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_subDelimitersTable":{"name":"_subDelimitersTable","qualifiedName":"dart-core.Uri._subDelimitersTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_unreserved2396Table":{"name":"_unreserved2396Table","qualifiedName":"dart-core.Uri._unreserved2396Table","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_unreservedTable":{"name":"_unreservedTable","qualifiedName":"dart-core.Uri._unreservedTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"_userInfo":{"name":"_userInfo","qualifiedName":"dart-core.Uri._userInfo","comment":"<p>The user-info part of the authority.</p>\n<p>Does not distinguish between an empty user-info and an absent one.\nThe value is always non-null.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_userinfoTable":{"name":"_userinfoTable","qualifiedName":"dart-core.Uri._userinfoTable","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"scheme":{"name":"scheme","qualifiedName":"dart-core.Uri.scheme","comment":"<p>Returns the scheme component.</p>\n<p>Returns the empty string if there is no scheme component.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_isPathAbsolute":{"name":"_isPathAbsolute","qualifiedName":"dart-core.Uri._isPathAbsolute","comment":"","commentFrom":"dart-core.Uri._isPathAbsolute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"_isWindows":{"name":"_isWindows","qualifiedName":"dart-core.Uri._isWindows","comment":"","commentFrom":"dart-core.Uri._isWindows","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"authority":{"name":"authority","qualifiedName":"dart-core.Uri.authority","comment":"<p>Returns the authority component.</p>\n<p>The authority is formatted from the <a>dart-core.Uri.userInfo</a>, <a>dart-core.Uri.host</a> and <a>dart-core.Uri.port</a>\nparts.</p>\n<p>Returns the empty string if there is no authority component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"base":{"name":"base","qualifiedName":"dart-core.Uri.base","comment":"<p>Returns the natural base URI for the current platform.</p>\n<p>When running in a browser this is the current URL (from\n<code>window.location.href</code>).</p>\n<p>When not running in a browser this is the file URI referencing\nthe current working directory.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{},"annotations":[]},"fragment":{"name":"fragment","qualifiedName":"dart-core.Uri.fragment","comment":"<p>Returns the fragment identifier component.</p>\n<p>Returns the empty string if there is no fragment identifier\ncomponent.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"hasAuthority":{"name":"hasAuthority","qualifiedName":"dart-core.Uri.hasAuthority","comment":"<p>Returns whether the URI has an <a>dart-core.Uri.authority</a> component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasFragment":{"name":"hasFragment","qualifiedName":"dart-core.Uri.hasFragment","comment":"<p>Returns whether the URI has a fragment part.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasPort":{"name":"hasPort","qualifiedName":"dart-core.Uri.hasPort","comment":"<p>Returns whether the URI has an explicit port.</p>\n<p>If the port number is the default port number\n(zero for unrecognized schemes, with http (80) and https (443) being\nrecognized),\nthen the port is made implicit and omitted from the URI.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasQuery":{"name":"hasQuery","qualifiedName":"dart-core.Uri.hasQuery","comment":"<p>Returns whether the URI has a query part.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Uri.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Uri.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"host":{"name":"host","qualifiedName":"dart-core.Uri.host","comment":"<p>Returns the host part of the authority component.</p>\n<p>Returns the empty string if there is no authority component and\nhence no host.</p>\n<p>If the host is an IP version 6 address, the surrounding <code>[</code> and <code>]</code> is\nremoved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isAbsolute":{"name":"isAbsolute","qualifiedName":"dart-core.Uri.isAbsolute","comment":"<p>Returns whether the URI is absolute.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"origin":{"name":"origin","qualifiedName":"dart-core.Uri.origin","comment":"<p>Returns the origin of the URI in the form scheme://host:port for the\nschemes http and https.</p>\n<p>It is an error if the scheme is not \"http\" or \"https\".</p>\n<p>See: http://www.w3.org/TR/2011/WD-html5-20110405/origin-0.html#origin</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"path":{"name":"path","qualifiedName":"dart-core.Uri.path","comment":"<p>Returns the path component.</p>\n<p>The returned path is encoded. To get direct access to the decoded\npath use <a>dart-core.Uri.pathSegments</a>.</p>\n<p>Returns the empty string if there is no path component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"pathSegments":{"name":"pathSegments","qualifiedName":"dart-core.Uri.pathSegments","comment":"<p>Returns the URI path split into its segments. Each of the\nsegments in the returned list have been decoded. If the path is\nempty the empty list will be returned. A leading slash <code>/</code> does\nnot affect the segments returned.</p>\n<p>The returned list is unmodifiable and will throw <a>dart-core.UnsupportedError</a> on any\ncalls that would mutate it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"port":{"name":"port","qualifiedName":"dart-core.Uri.port","comment":"<p>Returns the port part of the authority component.</p>\n<p>Returns the defualt port if there is no port number in the authority\ncomponent. That's 80 for http, 443 for https, and 0 for everything else.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"query":{"name":"query","qualifiedName":"dart-core.Uri.query","comment":"<p>Returns the query component. The returned query is encoded. To get\ndirect access to the decoded query use <a>dart-core.Uri.queryParameters</a>.</p>\n<p>Returns the empty string if there is no query component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"queryParameters":{"name":"queryParameters","qualifiedName":"dart-core.Uri.queryParameters","comment":"<p>Returns the URI query split into a map according to the rules\nspecified for FORM post in the <a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned map\nhas been decoded. If there is no query the empty map is returned.</p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.</p>\n<p>The returned map is unmodifiable and will throw <a>dart-core.UnsupportedError</a> on any\ncalls that would mutate it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"userInfo":{"name":"userInfo","qualifiedName":"dart-core.Uri.userInfo","comment":"<p>Returns the user info part of the authority component.</p>\n<p>Returns the empty string if there is no user info in the\nauthority component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"dart-core.Uri.Uri-","comment":"<p>Creates a new URI from its components.</p>\n<p>Each component is set through a named argument. Any number of\ncomponents can be provided. The <a>dart-core.Uri.Uri-.path</a> and <a>dart-core.Uri.Uri-.query</a> components can be set\nusing either of two different named arguments.</p>\n<p>The scheme component is set through <a>dart-core.Uri.Uri-.scheme</a>. The scheme is\nnormalized to all lowercase letters. If the scheme is omitted or empty,\nthe URI will not have a scheme part.</p>\n<p>The user info part of the authority component is set through\n<a>dart-core.Uri.Uri-.userInfo</a>. It defaults to the empty string, which will be omitted\nfrom the string representation of the URI.</p>\n<p>The host part of the authority component is set through\n<a>dart-core.Uri.Uri-.host</a>. The host can either be a hostname, an IPv4 address or an\nIPv6 address, contained in '' and ''. If the host contains a\n':' character, the '' and '' are added if not already provided.\nThe host is normalized to all lowercase letters.</p>\n<p>The port part of the authority component is set through\n<a>dart-core.Uri.Uri-.port</a>.\nIf <a>dart-core.Uri.Uri-.port</a> is omitted or <code>null</code>, it implies the default port for\nthe URI's scheme, and is equivalent to passing that port explicitly.\nThe recognized schemes, and their default ports, are \"http\" (80) and\n\"https\" (443). All other schemes are considered as having zero as the\ndefault port.</p>\n<p>If any of <code>userInfo</code>, <code>host</code> or <code>port</code> are provided,\nthe URI will have an autority according to <a>dart-core.Uri.hasAuthority</a>.</p>\n<p>The path component is set through either <a>dart-core.Uri.Uri-.path</a> or\n<a>dart-core.Uri.Uri-.pathSegments</a>. When <a>dart-core.Uri.Uri-.path</a> is used, it should be a valid URI path,\nbut invalid characters, except the general delimiters ':/@?#',\nwill be escaped if necessary.\nWhen <a>dart-core.Uri.Uri-.pathSegments</a> is used, each of the provided segments\nis first percent-encoded and then joined using the forward slash\nseparator. The percent-encoding of the path segments encodes all\ncharacters except for the unreserved characters and the following\nlist of characters: <code>!$&amp;'()*+,;=:@</code>. If the other components\ncalls for an absolute path a leading slash <code>/</code> is prepended if\nnot already there.</p>\n<p>The query component is set through either <a>dart-core.Uri.Uri-.query</a> or\n<a>dart-core.Uri.Uri-.queryParameters</a>. When <a>dart-core.Uri.Uri-.query</a> is used the provided string should\nbe a valid URI query, but invalid characters other than general delimiters,\nwill be escaped if necessary.\nWhen <a>dart-core.Uri.Uri-.queryParameters</a> is used the query is built from the\nprovided map. Each key and value in the map is percent-encoded\nand joined using equal and ampersand characters. The\npercent-encoding of the keys and values encodes all characters\nexcept for the unreserved characters.\nIf <code>query</code> is the empty string, it is equivalent to omitting it.\nTo have an actual empty query part,\nuse an empty list for <code>queryParameters</code>.\nIf both <code>query</code> and <code>queryParameters</code> are omitted or <code>null</code>, the\nURI will have no query part.</p>\n<p>The fragment component is set through <a>dart-core.Uri.Uri-.fragment</a>.\nIt should be a valid URI fragment, but invalid characters other than\ngeneral delimiters, will be escaped if necessary.\nIf <code>fragment</code> is omitted or <code>null</code>, the URI will have no fragment part.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"userInfo":{"name":"userInfo","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"\"","annotations":[]},"host":{"name":"host","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"pathSegments":{"name":"pathSegments","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"query":{"name":"query","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"fragment":{"name":"fragment","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_internal":{"name":"_internal","qualifiedName":"dart-core.Uri.Uri-_internal","comment":"<p>Internal non-verifying constructor. Only call with validated arguments.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_userInfo":{"name":"_userInfo","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_host":{"name":"_host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_port":{"name":"_port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"_path":{"name":"_path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_query":{"name":"_query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"_fragment":{"name":"_fragment","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"file":{"name":"file","qualifiedName":"dart-core.Uri.Uri-file","comment":"<p>Creates a new file URI from an absolute or relative file path.</p>\n<p>The file path is passed in <a>dart-core.Uri.Uri-file.path</a>.</p>\n<p>This path is interpreted using either Windows or non-Windows\nsemantics.</p>\n<p>With non-Windows semantics the slash (\"/\") is used to separate\npath segments.</p>\n<p>With Windows semantics, backslash (\"\\\") and forward-slash (\"/\")\nare used to separate path segments, except if the path starts\nwith \"\\\\?\\\" in which case, only backslash (\"\\\") separates path\nsegments.</p>\n<p>If the path starts with a path separator an absolute URI is\ncreated. Otherwise a relative URI is created. One exception from\nthis rule is that when Windows semantics is used and the path\nstarts with a drive letter followed by a colon (\":\") and a\npath separator then an absolute URI is created.</p>\n<p>The default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.</p>\n<p>To override the automatic detection of which semantics to use pass\na value for <a>dart-core.Uri.Uri-file.windows</a>. Passing <code>true</code> will use Windows\nsemantics and passing <code>false</code> will use non-Windows semantics.</p>\n<p>Examples using non-Windows semantics:</p>\n<pre><code>// xxx/yyy\nnew Uri.file(\"xxx/yyy\", windows: false);\n\n// xxx/yyy/\nnew Uri.file(\"xxx/yyy/\", windows: false);\n\n// file:///xxx/yyy\nnew Uri.file(\"/xxx/yyy\", windows: false);\n\n// file:///xxx/yyy/\nnew Uri.file(\"/xxx/yyy/\", windows: false);\n\n// C:\nnew Uri.file(\"C:\", windows: false);\n</code></pre>\n<p>Examples using Windows semantics:</p>\n<pre><code>// xxx/yyy\nnew Uri.file(r\"xxx\\yyy\", windows: true);\n\n// xxx/yyy/\nnew Uri.file(r\"xxx\\yyy\\\", windows: true);\n\nfile:///xxx/yyy\nnew Uri.file(r\"\\xxx\\yyy\", windows: true);\n\nfile:///xxx/yyy/\nnew Uri.file(r\"\\xxx\\yyy/\", windows: true);\n\n// file:///C:/xxx/yyy\nnew Uri.file(r\"C:\\xxx\\yyy\", windows: true);\n\n// This throws an error. A path with a drive letter is not absolute.\nnew Uri.file(r\"C:\", windows: true);\n\n// This throws an error. A path with a drive letter is not absolute.\nnew Uri.file(r\"C:xxx\\yyy\", windows: true);\n\n// file://server/share/file\nnew Uri.file(r\"\\\\server\\share\\file\", windows: true);\n</code></pre>\n<p>If the path passed is not a legal file path <a>dart-core.ArgumentError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"windows":{"name":"windows","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"http":{"name":"http","qualifiedName":"dart-core.Uri.Uri-http","comment":"<p>Creates a new <code>http</code> URI from authority, path and query.</p>\n<p>Examples:</p>\n<pre><code>// http://example.org/path?q=dart.\nnew Uri.http(\"google.com\", \"/search\", { \"q\" : \"dart\" });\n\n// http://user:pass@localhost:8080\nnew Uri.http(\"user:pass@localhost:8080\", \"\");\n\n// http://example.org/a%20b\nnew Uri.http(\"example.org\", \"a b\");\n\n// http://example.org/a%252F\nnew Uri.http(\"example.org\", \"/a%2F\");\n</code></pre>\n<p>The <code>scheme</code> is always set to <code>http</code>.</p>\n<p>The <code>userInfo</code>, <code>host</code> and <code>port</code> components are set from the\n<a>dart-core.Uri.Uri-http.authority</a> argument. If <code>authority</code> is <code>null</code> or empty,\nthe created <code>Uri</code> will have no authority, and will not be directly usable\nas an HTTP URL, which must have a non-empty host.</p>\n<p>The <code>path</code> component is set from the <a>dart-core.Uri.Uri-http.unencodedPath</a>\nargument. The path passed must not be encoded as this constructor\nencodes the path.</p>\n<p>The <code>query</code> component is set from the optional <a>dart-core.Uri.Uri-http.queryParameters</a>\nargument.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"authority":{"name":"authority","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"unencodedPath":{"name":"unencodedPath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"https":{"name":"https","qualifiedName":"dart-core.Uri.Uri-https","comment":"<p>Creates a new <code>https</code> URI from authority, path and query.</p>\n<p>This constructor is the same as <a>dart-core.Uri.Uri-http</a> except for the scheme\nwhich is set to <code>https</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"authority":{"name":"authority","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"unencodedPath":{"name":"unencodedPath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Uri.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Uri.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Uri.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"_addIfNonEmpty":{"name":"_addIfNonEmpty","qualifiedName":"dart-core.Uri._addIfNonEmpty","comment":"","commentFrom":"dart-core.Uri._addIfNonEmpty","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"sb":{"name":"sb","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StringBuffer","inner":[]}],"value":null,"annotations":[]},"test":{"name":"test","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"first":{"name":"first","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"second":{"name":"second","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_checkNonWindowsPathReservedCharacters":{"name":"_checkNonWindowsPathReservedCharacters","qualifiedName":"dart-core.Uri._checkNonWindowsPathReservedCharacters","comment":"","commentFrom":"dart-core.Uri._checkNonWindowsPathReservedCharacters","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"segments":{"name":"segments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"argumentError":{"name":"argumentError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_checkWindowsDriveLetter":{"name":"_checkWindowsDriveLetter","qualifiedName":"dart-core.Uri._checkWindowsDriveLetter","comment":"","commentFrom":"dart-core.Uri._checkWindowsDriveLetter","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"argumentError":{"name":"argumentError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_checkWindowsPathReservedCharacters":{"name":"_checkWindowsPathReservedCharacters","qualifiedName":"dart-core.Uri._checkWindowsPathReservedCharacters","comment":"","commentFrom":"dart-core.Uri._checkWindowsPathReservedCharacters","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"segments":{"name":"segments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"argumentError":{"name":"argumentError","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"firstSegment":{"name":"firstSegment","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"_defaultPort":{"name":"_defaultPort","qualifiedName":"dart-core.Uri._defaultPort","comment":"","commentFrom":"dart-core.Uri._defaultPort","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_escapeChar":{"name":"_escapeChar","qualifiedName":"dart-core.Uri._escapeChar","comment":"","commentFrom":"dart-core.Uri._escapeChar","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"char":{"name":"char","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_fail":{"name":"_fail","qualifiedName":"dart-core.Uri._fail","comment":"","commentFrom":"dart-core.Uri._fail","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_hasDotSegments":{"name":"_hasDotSegments","qualifiedName":"dart-core.Uri._hasDotSegments","comment":"","commentFrom":"dart-core.Uri._hasDotSegments","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_hexCharPairToByte":{"name":"_hexCharPairToByte","qualifiedName":"dart-core.Uri._hexCharPairToByte","comment":"<p>Convert a byte (2 character hex sequence) in string <a>dart-core.Uri._hexCharPairToByte.s</a> starting\nat position <a>dart-core.Uri._hexCharPairToByte.pos</a> to its ordinal value</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"pos":{"name":"pos","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_hexValue":{"name":"_hexValue","qualifiedName":"dart-core.Uri._hexValue","comment":"","commentFrom":"dart-core.Uri._hexValue","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"char":{"name":"char","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isAlphabeticCharacter":{"name":"_isAlphabeticCharacter","qualifiedName":"dart-core.Uri._isAlphabeticCharacter","comment":"","commentFrom":"dart-core.Uri._isAlphabeticCharacter","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"codeUnit":{"name":"codeUnit","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isGeneralDelimiter":{"name":"_isGeneralDelimiter","qualifiedName":"dart-core.Uri._isGeneralDelimiter","comment":"","commentFrom":"dart-core.Uri._isGeneralDelimiter","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"ch":{"name":"ch","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isHexDigit":{"name":"_isHexDigit","qualifiedName":"dart-core.Uri._isHexDigit","comment":"","commentFrom":"dart-core.Uri._isHexDigit","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"char":{"name":"char","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isRegNameChar":{"name":"_isRegNameChar","qualifiedName":"dart-core.Uri._isRegNameChar","comment":"","commentFrom":"dart-core.Uri._isRegNameChar","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"char":{"name":"char","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isSchemeCharacter":{"name":"_isSchemeCharacter","qualifiedName":"dart-core.Uri._isSchemeCharacter","comment":"","commentFrom":"dart-core.Uri._isSchemeCharacter","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"ch":{"name":"ch","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_isUnreservedChar":{"name":"_isUnreservedChar","qualifiedName":"dart-core.Uri._isUnreservedChar","comment":"","commentFrom":"dart-core.Uri._isUnreservedChar","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"ch":{"name":"ch","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeFileUri":{"name":"_makeFileUri","qualifiedName":"dart-core.Uri._makeFileUri","comment":"","commentFrom":"dart-core.Uri._makeFileUri","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeFragment":{"name":"_makeFragment","qualifiedName":"dart-core.Uri._makeFragment","comment":"","commentFrom":"dart-core.Uri._makeFragment","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"fragment":{"name":"fragment","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeHost":{"name":"_makeHost","qualifiedName":"dart-core.Uri._makeHost","comment":"<p>Check and normalize a most name.</p>\n<p>If the host name starts and ends with '' and '', it is considered an\nIPv6 address. If <a>dart-core.Uri._makeHost.strictIPv6</a> is false, the address is also considered\nan IPv6 address if it contains any ':' character.</p>\n<p>If it is not an IPv6 address, it is case- and escape-normalized.\nThis escapes all characters not valid in a reg-name,\nand converts all non-escape upper-case letters to lower-case.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"strictIPv6":{"name":"strictIPv6","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeHttpUri":{"name":"_makeHttpUri","qualifiedName":"dart-core.Uri._makeHttpUri","comment":"","commentFrom":"dart-core.Uri._makeHttpUri","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"authority":{"name":"authority","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"unencodedPath":{"name":"unencodedPath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"_makePath":{"name":"_makePath","qualifiedName":"dart-core.Uri._makePath","comment":"","commentFrom":"dart-core.Uri._makePath","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"pathSegments":{"name":"pathSegments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"ensureLeadingSlash":{"name":"ensureLeadingSlash","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"isFile":{"name":"isFile","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makePort":{"name":"_makePort","qualifiedName":"dart-core.Uri._makePort","comment":"","commentFrom":"dart-core.Uri._makePort","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"scheme":{"name":"scheme","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeQuery":{"name":"_makeQuery","qualifiedName":"dart-core.Uri._makeQuery","comment":"","commentFrom":"dart-core.Uri._makeQuery","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"_makeScheme":{"name":"_makeScheme","qualifiedName":"dart-core.Uri._makeScheme","comment":"<p>Validates scheme characters and does case-normalization.</p>\n<p>Schemes are converted to lower case. They cannot contain escapes.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeUserInfo":{"name":"_makeUserInfo","qualifiedName":"dart-core.Uri._makeUserInfo","comment":"","commentFrom":"dart-core.Uri._makeUserInfo","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"userInfo":{"name":"userInfo","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_makeWindowsFileUrl":{"name":"_makeWindowsFileUrl","qualifiedName":"dart-core.Uri._makeWindowsFileUrl","comment":"","commentFrom":"dart-core.Uri._makeWindowsFileUrl","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_merge":{"name":"_merge","qualifiedName":"dart-core.Uri._merge","comment":"","commentFrom":"dart-core.Uri._merge","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"base":{"name":"base","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"reference":{"name":"reference","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_normalize":{"name":"_normalize","qualifiedName":"dart-core.Uri._normalize","comment":"<p>Runs through component checking that each character is valid and\nnormalize percent escapes.</p>\n<p>Uses <a>dart-core.Uri._normalize.charTable</a> to check if a non-<code>%</code> character is allowed.\nEach <code>%</code> character must be followed by two hex digits.\nIf the hex-digits are lower case letters, they are converted to\nupper case.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"component":{"name":"component","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"charTable":{"name":"charTable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"_normalizeEscape":{"name":"_normalizeEscape","qualifiedName":"dart-core.Uri._normalizeEscape","comment":"<p>Performs RFC 3986 Percent-Encoding Normalization.</p>\n<p>Returns a replacement string that should be replace the original escape.\nReturns null if no replacement is necessary because the escape is\nnot for an unreserved character and is already non-lower-case.</p>\n<p>Returns \"%\" if the escape is invalid (not two valid hex digits following\nthe percent sign). The calling code should replace the percent\nsign with \"%25\", but leave the following two characters unmodified.</p>\n<p>If <a>dart-core.Uri._normalizeEscape.lowerCase</a> is true, a single character returned is always lower case,</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"index":{"name":"index","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"lowerCase":{"name":"lowerCase","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_normalizeRegName":{"name":"_normalizeRegName","qualifiedName":"dart-core.Uri._normalizeRegName","comment":"<p>Validates and does case- and percent-encoding normalization.</p>\n<p>The <a>dart-core.Uri._normalizeRegName.host</a> must be an RFC3986 \"reg-name\". It is converted\nto lower case, and percent escapes are converted to either\nlower case unreserved characters or upper case escapes.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"end":{"name":"end","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_removeDotSegments":{"name":"_removeDotSegments","qualifiedName":"dart-core.Uri._removeDotSegments","comment":"","commentFrom":"dart-core.Uri._removeDotSegments","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_stringOrNullLength":{"name":"_stringOrNullLength","qualifiedName":"dart-core.Uri._stringOrNullLength","comment":"","commentFrom":"dart-core.Uri._stringOrNullLength","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"s":{"name":"s","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_toFilePath":{"name":"_toFilePath","qualifiedName":"dart-core.Uri._toFilePath","comment":"","commentFrom":"dart-core.Uri._toFilePath","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"_toWindowsFilePath":{"name":"_toWindowsFilePath","qualifiedName":"dart-core.Uri._toWindowsFilePath","comment":"","commentFrom":"dart-core.Uri._toWindowsFilePath","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"_uriDecode":{"name":"_uriDecode","qualifiedName":"dart-core.Uri._uriDecode","comment":"<p>Uri-decode a percent-encoded string.</p>\n<p>It unescapes the string <a>dart-core.Uri._uriDecode.text</a> and returns the unescaped string.</p>\n<p>This function is similar to the JavaScript-function <code>decodeURI</code>.</p>\n<p>If <a>dart-core.Uri._uriDecode.plusToSpace</a> is <code>true</code>, plus characters will be converted to spaces.</p>\n<p>The decoder will create a byte-list of the percent-encoded parts, and then\ndecode the byte-list using <a>dart-core.Uri._uriDecode.encoding</a>. The default encodingis UTF-8.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"plusToSpace":{"name":"plusToSpace","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(_allowMalformed=false))","annotations":[]}},"annotations":[]},"_uriEncode":{"name":"_uriEncode","qualifiedName":"dart-core.Uri._uriEncode","comment":"<p>This is the internal implementation of JavaScript's encodeURI function.\nIt encodes all characters in the string <a>dart-core.Uri._uriEncode.text</a> except for those\nthat appear in <a>dart-core.Uri._uriEncode.canonicalTable</a>, and returns the escaped string.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"canonicalTable":{"name":"canonicalTable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(_allowMalformed=false))","annotations":[]},"spaceToPlus":{"name":"spaceToPlus","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"_writeAuthority":{"name":"_writeAuthority","qualifiedName":"dart-core.Uri._writeAuthority","comment":"","commentFrom":"dart-core.Uri._writeAuthority","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"ss":{"name":"ss","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StringSink","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeComponent":{"name":"decodeComponent","qualifiedName":"dart-core.Uri.decodeComponent","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeComponent.encodedComponent</a>.</p>\n<p>Note that decoding a URI component might change its meaning as\nsome of the decoded characters could be characters with are\ndelimiters for a given URI componene type. Always split a URI\ncomponent using the delimiters for the component before decoding\nthe individual parts.</p>\n<p>For handling the <a>dart-core.Uri.path</a> and <a>dart-core.Uri.query</a> components consider using\n<a>dart-core.Uri.pathSegments</a> and <a>dart-core.Uri.queryParameters</a> to get the separated and\ndecoded component.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encodedComponent":{"name":"encodedComponent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeFull":{"name":"decodeFull","qualifiedName":"dart-core.Uri.decodeFull","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeFull.uri</a>.</p>\n<p>Note that decoding a full URI might change its meaning as some of\nthe decoded characters could be reserved characters. In most\ncases an encoded URI should be parsed into components using\n<a>dart-core.Uri.parse</a> before decoding the separate components.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"decodeQueryComponent":{"name":"decodeQueryComponent","qualifiedName":"dart-core.Uri.decodeQueryComponent","comment":"<p>Decodes the percent-encoding in <a>dart-core.Uri.decodeQueryComponent.encodedComponent</a>, converting\npluses to spaces.</p>\n<p>It will create a byte-list of the decoded characters, and then use\n<a>dart-core.Uri.decodeQueryComponent.encoding</a> to decode the byte-list to a String. The default encoding is\nUTF-8.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"encodedComponent":{"name":"encodedComponent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(_allowMalformed=false))","annotations":[]}},"annotations":[]},"encodeComponent":{"name":"encodeComponent","qualifiedName":"dart-core.Uri.encodeComponent","comment":"<p>Encode the string <a>dart-core.Uri.encodeComponent.component</a> using percent-encoding to make it\nsafe for literal use as a URI component.</p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>-_.!~*'()</code> are percent-encoded. This is the\nset of characters specified in RFC 2396 and the which is\nspecified for the encodeUriComponent in ECMA-262 version 5.1.</p>\n<p>When manually encoding path segments or query components remember\nto encode each part separately before building the path or query\nstring.</p>\n<p>For encoding the query part consider using\n<a>dart-core.Uri.encodeQueryComponent</a>.</p>\n<p>To avoid the need for explicitly encoding use the <a>dart-core.Uri.pathSegments</a>\nand <a>dart-core.Uri.queryParameters</a> optional named arguments when constructing\na <a>dart-core.Uri</a>.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"component":{"name":"component","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeFull":{"name":"encodeFull","qualifiedName":"dart-core.Uri.encodeFull","comment":"<p>Encode the string <a>dart-core.Uri.encodeFull.uri</a> using percent-encoding to make it\nsafe for literal use as a full URI.</p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>!#$&amp;'()*+,-./:;=?@_~</code> are percent-encoded. This\nis the set of characters specified in in ECMA-262 version 5.1 for\nthe encodeURI function .</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"encodeQueryComponent":{"name":"encodeQueryComponent","qualifiedName":"dart-core.Uri.encodeQueryComponent","comment":"<p>Encode the string <a>dart-core.Uri.encodeQueryComponent.component</a> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.</p>\n<p>Encode the string <a>dart-core.Uri.encodeQueryComponent.component</a> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.</p>\n<p>The component is first encoded to bytes using <a>dart-core.Uri.encodeQueryComponent.encoding</a>.\nThe default is to use <a>dart-convert.UTF8</a> encoding, which preserves all\nthe characters that don't need encoding.</p>\n<p>Then the resulting bytes are \"percent-encoded\". This transforms\nspaces (U+0020) to a plus sign ('+') and all bytes that are not\nthe ASCII decimal digits, letters or one of '-._~' are written as\na percent sign '%' followed by the two-digit hexadecimal\nrepresentation of the byte.</p>\n<p>Note that the set of characters which are percent-encoded is a\nsuperset of what HTML 4.01 requires, since it refers to RFC 1738\nfor reserved characters.</p>\n<p>When manually encoding query components remember to encode each\npart separately before building the query string.</p>\n<p>To avoid the need for explicitly encoding the query use the\n<a>dart-core.Uri.queryParameters</a> optional named arguments when constructing a\n<a>dart-core.Uri</a>.</p>\n<p>See http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for more\ndetails.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"component":{"name":"component","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(_allowMalformed=false))","annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"dart-core.Uri.parse","comment":"<p>Creates a new <code>Uri</code> object by parsing a URI string.</p>\n<p>If the string is not valid as a URI or URI reference,\ninvalid characters will be percent escaped where possible.\nThe resulting <code>Uri</code> will represent a valid URI or URI reference.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"uri":{"name":"uri","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIPv4Address":{"name":"parseIPv4Address","qualifiedName":"dart-core.Uri.parseIPv4Address","comment":"<p>Parse the <a>dart-core.Uri.parseIPv4Address.host</a> as an IP version 4 (IPv4) address, returning the address\nas a list of 4 bytes in network byte order (big endian).</p>\n<p>Throws a <a>dart-core.FormatException</a> if <a>dart-core.Uri.parseIPv4Address.host</a> is not a valid IPv4 address\nrepresentation.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseIPv6Address":{"name":"parseIPv6Address","qualifiedName":"dart-core.Uri.parseIPv6Address","comment":"<p>Parse the <a>dart-core.Uri.parseIPv6Address.host</a> as an IP version 6 (IPv6) address, returning the address\nas a list of 16 bytes in network byte order (big endian).</p>\n<p>Throws a <a>dart-core.FormatException</a> if <a>dart-core.Uri.parseIPv6Address.host</a> is not a valid IPv6 address\nrepresentation.</p>\n<p>Acts on the substring from <a>dart-core.Uri.parseIPv6Address.start</a> to <a>dart-core.Uri.parseIPv6Address.end</a>. If <a>dart-core.Uri.parseIPv6Address.end</a> is omitted, it\ndefaults ot the end of the string.</p>\n<p>Some examples of IPv6 addresses:\n * ::1\n * FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n * 3ffe:2a00:100:7031::1\n * ::FFFF:129.144.52.38\n * 2010:836B:4179::836B:4179</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"host":{"name":"host","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"start":{"name":"start","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"end":{"name":"end","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"replace":{"name":"replace","qualifiedName":"dart-core.Uri.replace","comment":"<p>Returns a new <code>Uri</code> based on this one, but with some parts replaced.</p>\n<p>This method takes the same parameters as the new <a>dart-core</a> constructor,\nand they have the same meaning.</p>\n<p>At most one of <a>dart-core.Uri.replace.path</a> and <a>dart-core.Uri.replace.pathSegments</a> must be provided.\nLikewise, at most one of <a>dart-core.Uri.replace.query</a> and <a>dart-core.Uri.replace.queryParameters</a> must be provided.</p>\n<p>Each part that is not provided will default to the corresponding\nvalue from this <code>Uri</code> instead.</p>\n<p>This method is different from <a>dart-core.Uri.resolve</a> which overrides in a\nhierarchial manner,\nand can instead replace each part of a <code>Uri</code> individually.</p>\n<p>Example:</p>\n<pre><code>Uri uri1 = Uri.parse(\"a://b@c:4/d/e?f#g\");\nUri uri2 = uri1.replace(scheme: \"A\", path: \"D/E/E\", fragment: \"G\");\nprint(uri2);  // prints \"A://b@c:4/D/E/E/?f#G\"\n</code></pre>\n<p>This method acts similarly to using the <code>new Uri</code> constructor with\nsome of the arguments taken from this <code>Uri</code> . Example:</p>\n<pre><code>Uri uri3 = new Uri(\n    scheme: \"A\",\n    userInfo: uri1.userInfo,\n    host: uri1.host,\n    port: uri1.port,\n    path: \"D/E/E\",\n    query: uri1.query,\n    fragment: \"G\");\nprint(uri3);  // prints \"A://b@c:4/D/E/E/?f#G\"\nprint(uri2 == uri3);  // prints true.\n</code></pre>\n<p>Using this method can be seen as a shorthand for the <code>Uri</code> constructor\ncall above, but may also be slightly faster because the parts taken\nfrom this <code>Uri</code> need not be checked for validity again.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"scheme":{"name":"scheme","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"userInfo":{"name":"userInfo","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"host":{"name":"host","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"pathSegments":{"name":"pathSegments","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"query":{"name":"query","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"queryParameters":{"name":"queryParameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"fragment":{"name":"fragment","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resolve":{"name":"resolve","qualifiedName":"dart-core.Uri.resolve","comment":"<p>Resolve <a>dart-core.Uri.resolve.reference</a> as an URI relative to <code>this</code>.</p>\n<p>First turn <a>dart-core.Uri.resolve.reference</a> into a URI using <a>dart-core.Uri.parse</a>. Then resolve the\nresulting URI relative to <code>this</code>.</p>\n<p>Returns the resolved URI.</p>\n<p>See <a>dart-core.Uri.resolveUri</a> for details.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"reference":{"name":"reference","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"resolveUri":{"name":"resolveUri","qualifiedName":"dart-core.Uri.resolveUri","comment":"<p>Resolve <a>dart-core.Uri.resolveUri.reference</a> as an URI relative to <code>this</code>.</p>\n<p>Returns the resolved URI.</p>\n<p>The algorithm for resolving a reference is described in\n<a href=\"http://tools.ietf.org/html/rfc3986#section-5\" title=\"RFC-1123\">RFC-3986 Section 5</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Uri","inner":[]}],"parameters":{"reference":{"name":"reference","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"splitQueryString":{"name":"splitQueryString","qualifiedName":"dart-core.Uri.splitQueryString","comment":"<p>Returns the <a>dart-core.Uri.splitQueryString.query</a> split into a map according to the rules\nspecified for FORM post in the\n<a href=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section 17.13.4</a>. Each key and value in the returned\nmap has been decoded. If the <a>dart-core.Uri.splitQueryString.query</a>\nis the empty string an empty map is returned.</p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.</p>\n<p>Each query component will be decoded using <a>dart-core.Uri.splitQueryString.encoding</a>. The default encoding\nis UTF-8.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":true,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":"ConstructedConstant(Utf8Codec(_allowMalformed=false))","annotations":[]}},"annotations":[]},"toFilePath":{"name":"toFilePath","qualifiedName":"dart-core.Uri.toFilePath","comment":"<p>Returns the file path from a file URI.</p>\n<p>The returned path has either Windows or non-Windows\nsemantics.</p>\n<p>For non-Windows semantics the slash (\"/\") is used to separate\npath segments.</p>\n<p>For Windows semantics the backslash (\"\\\") separator is used to\nseparate path segments.</p>\n<p>If the URI is absolute the path starts with a path separator\nunless Windows semantics is used and the first path segment is a\ndrive letter. When Windows semantics is used a host component in\nthe uri in interpreted as a file server and a UNC path is\nreturned.</p>\n<p>The default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.</p>\n<p>To override the automatic detection of which semantics to use pass\na value for <a>dart-core.Uri.toFilePath.windows</a>. Passing <code>true</code> will use Windows\nsemantics and passing <code>false</code> will use non-Windows semantics.</p>\n<p>If the URI ends with a slash (i.e. the last path component is\nempty) the returned file path will also end with a slash.</p>\n<p>With Windows semantics URIs starting with a drive letter cannot\nbe relative to the current drive on the designated drive. That is\nfor the URI <code>file:///c:abc</code> calling <code>toFilePath</code> will throw as a\npath segment cannot contain colon on Windows.</p>\n<p>Examples using non-Windows semantics (resulting of calling\ntoFilePath in comment):</p>\n<pre><code>Uri.parse(\"xxx/yyy\");  // xxx/yyy\nUri.parse(\"xxx/yyy/\");  // xxx/yyy/\nUri.parse(\"file:///xxx/yyy\");  // /xxx/yyy\nUri.parse(\"file:///xxx/yyy/\");  // /xxx/yyy/\nUri.parse(\"file:///C:\");  // /C:\nUri.parse(\"file:///C:a\");  // /C:a\n</code></pre>\n<p>Examples using Windows semantics (resulting URI in comment):</p>\n<pre><code>Uri.parse(\"xxx/yyy\");  // xxx\\yyy\nUri.parse(\"xxx/yyy/\");  // xxx\\yyy\\\nUri.parse(\"file:///xxx/yyy\");  // \\xxx\\yyy\nUri.parse(\"file:///xxx/yyy/\");  // \\xxx\\yyy/\nUri.parse(\"file:///C:/xxx/yyy\");  // C:\\xxx\\yyy\nUri.parse(\"file:C:xxx/yyy\");  // Throws as a path segment\n                              // cannot contain colon on Windows.\nUri.parse(\"file://server/share/file\");  // \\\\server\\share\\file\n</code></pre>\n<p>If the URI is not a file URI calling this throws\n<a>dart-core.UnsupportedError</a>.</p>\n<p>If the URI cannot be converted to a file path calling this throws\n<a>dart-core.UnsupportedError</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"windows":{"name":"windows","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Uri.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-core.Uri.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-core.Uri.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-core.Uri.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-core.Uri.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-core.Uri.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-core.Uri.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-core.Uri.noSuchMethod","comment":"<p><a>dart-core.Uri.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-core.Uri.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-core.Uri.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-core.Uri.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"dart-core.Uri.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}
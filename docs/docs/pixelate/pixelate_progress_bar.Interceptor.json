{"name":"Interceptor","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor","comment":"<p>The base interceptor class.</p>\n<p>The code <code>r.foo(a)</code> is compiled to <code>getInterceptor(r).foo$1(r, a)</code>.  The\nvalue returned by <a>pixelate/_interceptors.getInterceptor</a> holds the methods separately from the\nstate of the instance.  The compiler converts the methods on an interceptor\nto take the Dart <code>this</code> argument as an explicit <code>receiver</code> argument.  The\nJavaScript <code>this</code> parameter is bound to the interceptor.</p>\n<p>In order to have uniform call sites, if a method is defined on an\ninterceptor, methods of that name on plain unintercepted classes also use the\ninterceptor calling convention.  The plain classes are <em>self-interceptors</em>,\nand for them, <code>getInterceptor(r)</code> returns <code>r</code>.  Methods on plain\nunintercepted classes have a redundant <code>receiver</code> argument and should ignore\nit in favour of <code>this</code>.</p>\n<p>In the case of mixins, a method may be placed on both an intercepted class\nand an unintercepted class.  In this case, the method must use the <code>receiver</code>\nparameter.</p>\n<p>There are various optimizations of the general call pattern.</p>\n<p>When the interceptor can be statically determined, it can be used directly:</p>\n<pre><code>CONSTANT_INTERCEPTOR.foo$1(r, a)\n</code></pre>\n<p>If there are only a few classes, <a>pixelate/_interceptors.getInterceptor</a> can be specialized with a\nmore efficient dispatch:</p>\n<pre><code>getInterceptor$specialized(r).foo$1(r, a)\n</code></pre>\n<p>If it can be determined that the receiver is an unintercepted class, it can\nbe called directly:</p>\n<pre><code>r.foo$1(r, a)\n</code></pre>\n<p>If, further, it is known that the call site cannot call a foo that is\nmixed-in to a native class, then it is known that the explicit receiver is\nignored, and space-saving dummy value can be passed instead:</p>\n<pre><code>r.foo$1(0, a)\n</code></pre>\n<p>This class defines implementations of <em>all</em> methods on <a>pixelate/dart-core.Object</a> so no\ninterceptor inherits an implementation from <a>pixelate/dart-core.Object</a>.  This enables the\nimplementations on Object to ignore the explicit receiver argument, which\nallows dummy receiver optimization.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["pixelate/pixelate_progress_bar.ChildNode","pixelate/pixelate_progress_bar.EventTarget","pixelate/pixelate_progress_bar.ParentNode"],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>pixelate/pixelate_progress_bar.Interceptor.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.Interceptor-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>pixelate/pixelate_progress_bar.Interceptor.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>pixelate/pixelate_progress_bar.Interceptor.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.noSuchMethod","comment":"<p><a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>pixelate/pixelate_progress_bar.Interceptor.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>pixelate/pixelate_progress_bar.Interceptor.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>pixelate/pixelate_progress_bar.Interceptor.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.noSuchMethod","comment":"<p><a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>pixelate/pixelate_progress_bar.Interceptor.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"pixelate/pixelate_progress_bar.Interceptor.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}
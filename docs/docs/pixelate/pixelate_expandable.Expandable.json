{"name":"Expandable","qualifiedName":"pixelate/pixelate_expandable.Expandable","comment":"<p>Creates a behavior for a PolymerElement that has an expanable area within.</p>\n<p>When setting up the PolymerElement there needs to be a view over the\ncontent. This is done to ensure that the content has a queryable height.</p>\n<pre><code>&lt;polymer-element name=\"px-example\"&gt;\n  &lt;!-- The area whose dimensions are modified --&gt;\n  &lt;div id=\"view\"&gt;\n    &lt;!-- Container for the user defined content --&gt;\n    &lt;div id=\"content\"&gt;\n      &lt;content&gt;&lt;/content&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/polymer-element&gt;\n</code></pre>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["pixelate/pixelate_expander.Expander"],"variables":{"_hasHeightTransition":{"name":"_hasHeightTransition","qualifiedName":"pixelate/pixelate_expandable.Expandable._hasHeightTransition","comment":"<p>Whether the expandable item is using a transition to animate.</p>\n<p>This is used internally to determine whether to set the max height\nor the visibility property on the view.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"_transitionEndSubscription":{"name":"_transitionEndSubscription","qualifiedName":"pixelate/pixelate_expandable.Expandable._transitionEndSubscription","comment":"<p>Subscription to the <a>pixelate/pixelate_expandable.Expandable.onTransitionEnd</a> event stream.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}]}],"annotations":[]},"collapsedEvent":{"name":"collapsedEvent","qualifiedName":"pixelate/pixelate_expandable.Expandable.collapsedEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"expandedEvent":{"name":"expandedEvent","qualifiedName":"pixelate/pixelate_expandable.Expandable.expandedEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"expanded=":{"name":"expanded=","qualifiedName":"pixelate/pixelate_expandable.Expandable.expanded=","comment":"","commentFrom":"pixelate_expandable.Expandable.expanded=","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"content":{"name":"content","qualifiedName":"pixelate/pixelate_expandable.Expandable.content","comment":"<p>The content area to expand or contract.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]},"expanded":{"name":"expanded","qualifiedName":"pixelate/pixelate_expandable.Expandable.expanded","comment":"<p>Whether the content area is expanded.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onTransitionEnd":{"name":"onTransitionEnd","qualifiedName":"pixelate/pixelate_expandable.Expandable.onTransitionEnd","comment":"","commentFrom":"pixelate_expandable.Expandable.onTransitionEnd","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}]}],"parameters":{},"annotations":[]},"view":{"name":"view","qualifiedName":"pixelate/pixelate_expandable.Expandable.view","comment":"<p>The view of the content area.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"_checkForTransition":{"name":"_checkForTransition","qualifiedName":"pixelate/pixelate_expandable.Expandable._checkForTransition","comment":"<p>Check for a height transition within the component.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_collapse":{"name":"_collapse","qualifiedName":"pixelate/pixelate_expandable.Expandable._collapse","comment":"<p>Collapses the element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_expand":{"name":"_expand","qualifiedName":"pixelate/pixelate_expandable.Expandable._expand","comment":"<p>Expands the element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_onTransitionEnd":{"name":"_onTransitionEnd","qualifiedName":"pixelate/pixelate_expandable.Expandable._onTransitionEnd","comment":"<p>Callback for when a transition ends.</p>\n<p>Used to check the modify the max-height attribute when the animation ends\nto ensure the element can stretch further.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"transition":{"name":"transition","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"pixelate/pixelate_expandable.Expandable.dispatchEvent","comment":"","commentFrom":"pixelate_expandable.Expandable.dispatchEvent","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expandedChanged":{"name":"expandedChanged","qualifiedName":"pixelate/pixelate_expandable.Expandable.expandedChanged","comment":"<p>Callback for when the <a>pixelate/pixelate_expandable.Expandable.expanded</a> value changes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"oldValue":{"name":"oldValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"initializeExpandable":{"name":"initializeExpandable","qualifiedName":"pixelate/pixelate_expandable.Expandable.initializeExpandable","comment":"<p>Initializes the behavior.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toggle":{"name":"toggle","qualifiedName":"pixelate/pixelate_expandable.Expandable.toggle","comment":"<p>Toggles the expansion of the element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"pixelate/pixelate_expandable.Expandable.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>pixelate/pixelate_expandable.Expandable.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"pixelate/pixelate_expandable.Expandable.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"pixelate/pixelate_expandable.Expandable.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>pixelate/pixelate_expandable.Expandable.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>pixelate/pixelate_expandable.Expandable.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"pixelate/pixelate_expandable.Expandable.noSuchMethod","comment":"<p><a>pixelate/pixelate_expandable.Expandable.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>pixelate/pixelate_expandable.Expandable.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>pixelate/pixelate_expandable.Expandable.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>pixelate/pixelate_expandable.Expandable.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"pixelate/pixelate_expandable.Expandable.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}
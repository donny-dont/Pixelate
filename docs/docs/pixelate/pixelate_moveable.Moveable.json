{"name":"Moveable","qualifiedName":"pixelate/pixelate_moveable.Moveable","comment":"<p>Creates a behavior for a PolymerElement that handles moveable content.</p>\n<p>The <a>pixelate/pixelate_moveable.Moveable</a> mixin allows the user to reposition an element within the\nlayout by selecting it and moving it to a new position on the screen.</p>\n<p>When the custom element is created the <a>pixelate/pixelate_moveable.Moveable.initializeMoveable</a> method needs to\nbe called. This sets up the behavior as a mixin cannot have a constructor.\nAdditionally a moveable element should be used in conjunction with the\n<a>pixelate/pixelate_transformable.Transformable</a> mixin which handles 2D transformations.</p>\n<pre><code>class MoveableElement extends PolymerElement with Moveable, Transformable {\n  DroppableElement.created()\n      : super.created()\n  {\n    initializeTransformable();\n    initializeMoveable();\n  }\n}\n</code></pre>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"movedEvent":{"name":"movedEvent","qualifiedName":"pixelate/pixelate_moveable.Moveable.movedEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"_isMoving":{"name":"_isMoving","qualifiedName":"pixelate/pixelate_moveable.Moveable._isMoving","comment":"<p>Whether the element is being moved.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"_lastX":{"name":"_lastX","qualifiedName":"pixelate/pixelate_moveable.Moveable._lastX","comment":"<p>The last x position of the element.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_lastY":{"name":"_lastY","qualifiedName":"pixelate/pixelate_moveable.Moveable._lastY","comment":"<p>The last y position of the element.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_mouseUpSubscription":{"name":"_mouseUpSubscription","qualifiedName":"pixelate/pixelate_moveable.Moveable._mouseUpSubscription","comment":"<p>A subscription to mouse up events.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"annotations":[]},"_mouseMoveSubscription":{"name":"_mouseMoveSubscription","qualifiedName":"pixelate/pixelate_moveable.Moveable._mouseMoveSubscription","comment":"<p>A subscription to mouse move events.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"translateX=":{"name":"translateX=","qualifiedName":"pixelate/pixelate_moveable.Moveable.translateX=","comment":"","commentFrom":"pixelate_moveable.Moveable.translateX=","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"translateY=":{"name":"translateY=","qualifiedName":"pixelate/pixelate_moveable.Moveable.translateY=","comment":"","commentFrom":"pixelate_moveable.Moveable.translateY=","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"moveableElement":{"name":"moveableElement","qualifiedName":"pixelate/pixelate_moveable.Moveable.moveableElement","comment":"<p>The element that is used to move the element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]},"style":{"name":"style","qualifiedName":"pixelate/pixelate_moveable.Moveable.style","comment":"","commentFrom":"pixelate_moveable.Moveable.style","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.CssStyleDeclaration","inner":[]}],"parameters":{},"annotations":[]},"zoom":{"name":"zoom","qualifiedName":"pixelate/pixelate_moveable.Moveable.zoom","comment":"","commentFrom":"pixelate_moveable.Moveable.zoom","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"translateX":{"name":"translateX","qualifiedName":"pixelate/pixelate_moveable.Moveable.translateX","comment":"","commentFrom":"pixelate_moveable.Moveable.translateX","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"translateY":{"name":"translateY","qualifiedName":"pixelate/pixelate_moveable.Moveable.translateY","comment":"","commentFrom":"pixelate_moveable.Moveable.translateY","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"pixelate/pixelate_moveable.Moveable.parent","comment":"","commentFrom":"pixelate_moveable.Moveable.parent","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"pixelate/pixelate_moveable.Moveable.dispatchEvent","comment":"","commentFrom":"pixelate_moveable.Moveable.dispatchEvent","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"initializeMoveable":{"name":"initializeMoveable","qualifiedName":"pixelate/pixelate_moveable.Moveable.initializeMoveable","comment":"<p>Initializes the behavior.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_onMoveBegin":{"name":"_onMoveBegin","qualifiedName":"pixelate/pixelate_moveable.Moveable._onMoveBegin","comment":"","commentFrom":"pixelate_moveable.Moveable._onMoveBegin","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.MouseEvent","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_onMoveEnd":{"name":"_onMoveEnd","qualifiedName":"pixelate/pixelate_moveable.Moveable._onMoveEnd","comment":"","commentFrom":"pixelate_moveable.Moveable._onMoveEnd","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.MouseEvent","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_onMove":{"name":"_onMove","qualifiedName":"pixelate/pixelate_moveable.Moveable._onMove","comment":"","commentFrom":"pixelate_moveable.Moveable._onMove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.MouseEvent","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"pixelate/pixelate_moveable.Moveable.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>pixelate/pixelate_moveable.Moveable.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"pixelate/pixelate_moveable.Moveable.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"pixelate/pixelate_moveable.Moveable.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>pixelate/pixelate_moveable.Moveable.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>pixelate/pixelate_moveable.Moveable.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"pixelate/pixelate_moveable.Moveable.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"pixelate/pixelate_moveable.Moveable.noSuchMethod","comment":"<p><a>pixelate/pixelate_moveable.Moveable.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>pixelate/pixelate_moveable.Moveable.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>pixelate/pixelate_moveable.Moveable.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>pixelate/pixelate_moveable.Moveable.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}
{"name":"TreeView","qualifiedName":"pixelate/pixelate_tree_view.TreeView","comment":"","isAbstract":false,"superclass":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup","implements":[],"subclass":[],"variables":{"multiple":{"name":"multiple","qualifiedName":"pixelate/pixelate_tree_view.TreeView.multiple","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/polymer.published","parameters":[]}]}},"inheritedVariables":{"_localName":{"name":"_localName","qualifiedName":"pixelate/pixelate_accordion.Node._localName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.localName'"]}]},"_namespaceUri":{"name":"_namespaceUri","qualifiedName":"pixelate/pixelate_accordion.Node._namespaceUri","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.namespaceURI'"]}]},"baseUri":{"name":"baseUri","qualifiedName":"pixelate/pixelate_accordion.Node.baseUri","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.baseURI'"]}]},"childNodes":{"name":"childNodes","qualifiedName":"pixelate/pixelate_accordion.Node.childNodes","comment":"<p>A list of this node's children.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.childNodes\">Node.childNodes</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.childNodes'"]}]},"firstChild":{"name":"firstChild","qualifiedName":"pixelate/pixelate_accordion.Node.firstChild","comment":"<p>The first child of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.firstChild\">Node.firstChild</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.firstChild'"]}]},"lastChild":{"name":"lastChild","qualifiedName":"pixelate/pixelate_accordion.Node.lastChild","comment":"<p>The last child of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.lastChild\">Node.lastChild</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.lastChild'"]}]},"nextNode":{"name":"nextNode","qualifiedName":"pixelate/pixelate_accordion.Node.nextNode","comment":"<p>The next sibling node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nextSibling\">Node.nextSibling</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.nextSibling'"]}]},"nodeName":{"name":"nodeName","qualifiedName":"pixelate/pixelate_accordion.Node.nodeName","comment":"<p>The name of this node.</p>\n<p>This varies by this node's <a>pixelate/pixelate_accordion.Node.nodeType</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeName\">Node.nodeName</a>\nfrom MDN. This page contains a table of <a>pixelate/pixelate_accordion.Node.nodeName</a> values for each\n<a>pixelate/pixelate_accordion.Node.nodeType</a>.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.nodeName'"]}]},"nodeType":{"name":"nodeType","qualifiedName":"pixelate/pixelate_accordion.Node.nodeType","comment":"<p>The type of node.</p>\n<p>This value is one of:</p><ul><li><a>pixelate/pixelate_accordion.Node.ATTRIBUTE_NODE</a> if this node is an attribute.</li><li>[CDATA_SECTION_NODE] if this node is a <a>pixelate/dart-dom-html.CDataSection</a>.</li><li><a>pixelate/pixelate_accordion.Node.COMMENT_NODE</a> if this node is a <a>pixelate/dart-dom-html.Comment</a>.</li><li>[DOCUMENT_FRAGMENT_NODE] if this node is a <a>pixelate/dart-dom-html.DocumentFragment</a>.</li><li><a>pixelate/pixelate_accordion.Node.DOCUMENT_NODE</a> if this node is a <a>pixelate/dart-dom-html.Document</a>.</li><li>[DOCUMENT_TYPE_NODE] if this node is a DocumentType node.</li><li><a>pixelate/pixelate_accordion.Node.ELEMENT_NODE</a> if this node is an <a>pixelate/pixelate_accordion.Element</a>.</li><li><a>pixelate/pixelate_accordion.Node.ENTITY_NODE</a> if this node is an entity.</li><li>[ENTITY_REFERENCE_NODE] if this node is an entity reference.</li><li><a>pixelate/pixelate_accordion.Node.NOTATION_NODE</a> if this node is a notation.</li><li>[PROCESSING_INSTRUCTION_NODE] if this node is a <a>pixelate/dart-dom-html.ProcessingInstruction</a>.</li><li><a>pixelate/pixelate_accordion.Node.TEXT_NODE</a> if this node is a <a>pixelate/dart-dom-html.Text</a> node.</li></ul>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType\">Node.nodeType</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.nodeType'"]}]},"nodeValue":{"name":"nodeValue","qualifiedName":"pixelate/pixelate_accordion.Node.nodeValue","comment":"<p>The value of this node.</p>\n<p>This varies by this type's <a>pixelate/pixelate_accordion.Node.nodeType</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeValue\">Node.nodeValue</a>\nfrom MDN. This page contains a table of <a>pixelate/pixelate_accordion.Node.nodeValue</a> values for each\n<a>pixelate/pixelate_accordion.Node.nodeType</a>.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.nodeValue'"]}]},"ownerDocument":{"name":"ownerDocument","qualifiedName":"pixelate/pixelate_accordion.Node.ownerDocument","comment":"<p>The document this node belongs to.</p>\n<p>Returns null if this node does not belong to any document.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.ownerDocument\">Node.ownerDocument</a> from\nMDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Document","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.ownerDocument'"]}]},"parent":{"name":"parent","qualifiedName":"pixelate/pixelate_accordion.Node.parent","comment":"<p>The parent element of this node.</p>\n<p>Returns null if this node either does not have a parent or its parent is\nnot an element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.parentElement\">Node.parentElement</a> from\nW3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.parentElement'"]}]},"parentNode":{"name":"parentNode","qualifiedName":"pixelate/pixelate_accordion.Node.parentNode","comment":"<p>The parent node of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.parentNode\">Node.parentNode</a> from\nMDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.parentNode'"]}]},"previousNode":{"name":"previousNode","qualifiedName":"pixelate/pixelate_accordion.Node.previousNode","comment":"<p>The previous sibling node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.previousSibling\">Node.previousSibling</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.previousSibling'"]}]},"text":{"name":"text","qualifiedName":"pixelate/pixelate_accordion.Node.text","comment":"<p>All text within this node and its decendents.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent\">Node.textContent</a> from\nMDN.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.textContent'"]}]},"nextElementSibling":{"name":"nextElementSibling","qualifiedName":"pixelate/pixelate_accordion.Element.nextElementSibling","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.nextElementSibling'"]}]},"previousElementSibling":{"name":"previousElementSibling","qualifiedName":"pixelate/pixelate_accordion.Element.previousElementSibling","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.previousElementSibling'"]}]},"_childElementCount":{"name":"_childElementCount","qualifiedName":"pixelate/pixelate_accordion.Element._childElementCount","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.childElementCount'"]}]},"_children":{"name":"_children","qualifiedName":"pixelate/pixelate_accordion.Element._children","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.children'"]}]},"_firstElementChild":{"name":"_firstElementChild","qualifiedName":"pixelate/pixelate_accordion.Element._firstElementChild","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.firstElementChild'"]}]},"_lastElementChild":{"name":"_lastElementChild","qualifiedName":"pixelate/pixelate_accordion.Element._lastElementChild","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.lastElementChild'"]}]},"_attributes":{"name":"_attributes","qualifiedName":"pixelate/pixelate_accordion.Element._attributes","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html._NamedNodeMap","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.attributes'"]}]},"_clientHeight":{"name":"_clientHeight","qualifiedName":"pixelate/pixelate_accordion.Element._clientHeight","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientHeight'"]}]},"_clientLeft":{"name":"_clientLeft","qualifiedName":"pixelate/pixelate_accordion.Element._clientLeft","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientLeft'"]}]},"_clientTop":{"name":"_clientTop","qualifiedName":"pixelate/pixelate_accordion.Element._clientTop","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientTop'"]}]},"_clientWidth":{"name":"_clientWidth","qualifiedName":"pixelate/pixelate_accordion.Element._clientWidth","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientWidth'"]}]},"_innerHtml":{"name":"_innerHtml","qualifiedName":"pixelate/pixelate_accordion.Element._innerHtml","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.innerHTML'"]}]},"_offsetHeight":{"name":"_offsetHeight","qualifiedName":"pixelate/pixelate_accordion.Element._offsetHeight","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetHeight'"]}]},"_offsetLeft":{"name":"_offsetLeft","qualifiedName":"pixelate/pixelate_accordion.Element._offsetLeft","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetLeft'"]}]},"_offsetTop":{"name":"_offsetTop","qualifiedName":"pixelate/pixelate_accordion.Element._offsetTop","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetTop'"]}]},"_offsetWidth":{"name":"_offsetWidth","qualifiedName":"pixelate/pixelate_accordion.Element._offsetWidth","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetWidth'"]}]},"_scrollHeight":{"name":"_scrollHeight","qualifiedName":"pixelate/pixelate_accordion.Element._scrollHeight","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollHeight'"]}]},"_scrollLeft":{"name":"_scrollLeft","qualifiedName":"pixelate/pixelate_accordion.Element._scrollLeft","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollLeft'"]}]},"_scrollTop":{"name":"_scrollTop","qualifiedName":"pixelate/pixelate_accordion.Element._scrollTop","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollTop'"]}]},"_scrollWidth":{"name":"_scrollWidth","qualifiedName":"pixelate/pixelate_accordion.Element._scrollWidth","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollWidth'"]}]},"_xtag":{"name":"_xtag","qualifiedName":"pixelate/pixelate_accordion.Element._xtag","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[]},"className":{"name":"className","qualifiedName":"pixelate/pixelate_accordion.Element.className","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.className'"]}]},"contentEditable":{"name":"contentEditable","qualifiedName":"pixelate/pixelate_accordion.Element.contentEditable","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.contentEditable'"]}]},"dir":{"name":"dir","qualifiedName":"pixelate/pixelate_accordion.Element.dir","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.dir'"]}]},"draggable":{"name":"draggable","qualifiedName":"pixelate/pixelate_accordion.Element.draggable","comment":"<p>Indicates whether the element can be dragged and dropped.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.draggable'"]}]},"dropzone":{"name":"dropzone","qualifiedName":"pixelate/pixelate_accordion.Element.dropzone","comment":"<p>A set of space-separated keywords that specify what kind of data this\nElement accepts on drop and what to do with that data.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.webkitdropzone'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"hidden":{"name":"hidden","qualifiedName":"pixelate/pixelate_accordion.Element.hidden","comment":"<p>Indicates whether the element is not relevant to the page's current state.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#the-hidden-attribute\">Hidden attribute specification</a>\nfrom WHATWG.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.hidden'"]}]},"id":{"name":"id","qualifiedName":"pixelate/pixelate_accordion.Element.id","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.id'"]}]},"isContentEditable":{"name":"isContentEditable","qualifiedName":"pixelate/pixelate_accordion.Element.isContentEditable","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.isContentEditable'"]}]},"lang":{"name":"lang","qualifiedName":"pixelate/pixelate_accordion.Element.lang","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.lang'"]}]},"offsetParent":{"name":"offsetParent","qualifiedName":"pixelate/pixelate_accordion.Element.offsetParent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Element","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetParent'"]}]},"outerHtml":{"name":"outerHtml","qualifiedName":"pixelate/pixelate_accordion.Element.outerHtml","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.outerHTML'"]}]},"spellcheck":{"name":"spellcheck","qualifiedName":"pixelate/pixelate_accordion.Element.spellcheck","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.spellcheck'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"style":{"name":"style","qualifiedName":"pixelate/pixelate_accordion.Element.style","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.CssStyleDeclaration","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.style'"]}]},"tabIndex":{"name":"tabIndex","qualifiedName":"pixelate/pixelate_accordion.Element.tabIndex","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.tabIndex'"]}]},"tagName":{"name":"tagName","qualifiedName":"pixelate/pixelate_accordion.Element.tagName","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.tagName'"]}]},"title":{"name":"title","qualifiedName":"pixelate/pixelate_accordion.Element.title","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.title'"]}]},"translate":{"name":"translate","qualifiedName":"pixelate/pixelate_accordion.Element.translate","comment":"<p>Specifies whether this element's text content changes when the page is\nlocalized.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-translate-attribute\">The translate attribute</a>\nfrom WHATWG.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.translate'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"_node":{"name":"_node","qualifiedName":"pixelate/pixelate_accordion.NodeBindExtension._node","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"pixelate/pixelate_accordion.Node","inner":[]}],"annotations":[]},"_templateInstance":{"name":"_templateInstance","qualifiedName":"pixelate/pixelate_accordion.NodeBindExtension._templateInstance","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"template_binding.TemplateInstance","inner":[]}],"annotations":[]},"bindings":{"name":"bindings","qualifiedName":"pixelate/pixelate_accordion.NodeBindExtension.bindings","comment":"<p>Gets the data bindings that are associated with this node, if any.</p>\n<p>This starts out null, and if <a>pixelate/template_binding.enableBindingsReflection</a> is enabled, calls\nto <a>pixelate/pixelate_flex_panel.NodeBindExtension.bind</a> will initialize this field and the binding.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"observe-src-bindable.Bindable","inner":[]}]}],"annotations":[]},"_changes":{"name":"_changes","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer+Observable._changes","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-async.StreamController","inner":[]}],"annotations":[]},"_records":{"name":"_records","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer+Observable._records","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"observe-src-change_record.ChangeRecord","inner":[]}]}],"annotations":[]},"_values":{"name":"_values","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer+Observable._values","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Symbol","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"annotations":[]},"$":{"name":"$","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer.$","comment":"<p>Map of items in the shadow root(s) by their <a>pixelate/pixelate_accordion.Element.id</a>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"annotations":[]},"_element":{"name":"_element","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._element","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"polymer.PolymerDeclaration","inner":[]}],"annotations":[]},"_hasBeenAttached":{"name":"_hasBeenAttached","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._hasBeenAttached","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"_jsElem":{"name":"_jsElem","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._jsElem","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-js.JsObject","inner":[]}],"annotations":[]},"_namedObservers":{"name":"_namedObservers","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._namedObservers","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-async.StreamSubscription","inner":[]}]}],"annotations":[]},"_observers":{"name":"_observers","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._observers","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe-src-bindable.Bindable","inner":[]}]}]}],"annotations":[]},"_propertyObserver":{"name":"_propertyObserver","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._propertyObserver","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"observe-src-path_observer.CompoundObserver","inner":[]}],"annotations":[]},"_readied":{"name":"_readied","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._readied","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"_unbindAllJob":{"name":"_unbindAllJob","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._unbindAllJob","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"polymer.PolymerJob","inner":[]}],"annotations":[]},"_unbound":{"name":"_unbound","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer._unbound","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"shadowRoots":{"name":"shadowRoots","qualifiedName":"pixelate/pixelate_accordion.HtmlElement+Polymer.shadowRoots","comment":"<p>Gets the shadow root associated with the corresponding custom element.</p>\n<p>This is identical to <a>pixelate/pixelate_accordion.Element.shadowRoot</a>, unless there are multiple levels of\ninheritance and they each have their own shadow root. For example,\nthis can happen if the base class and subclass both have <code>&lt;template&gt;</code> tags\nin their <code>&lt;polymer-element&gt;</code> tags.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-dom-html.ShadowRoot","inner":[]}]}],"annotations":[]},"_observer":{"name":"_observer","qualifiedName":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup._observer","comment":"<p>Observer for changes within the element.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.MutationObserver","inner":[]}],"annotations":[]},"_selectableItems":{"name":"_selectableItems","qualifiedName":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup._selectableItems","comment":"<p>The list of selectable items.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"pixelate_selectable.Selectable","inner":[]}]}],"annotations":[]},"_selected":{"name":"_selected","qualifiedName":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup._selected","comment":"<p>The list of selected items.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"pixelate_selectable.Selectable","inner":[]}]}],"annotations":[]},"_selectedIndex":{"name":"_selectedIndex","qualifiedName":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup._selectedIndex","comment":"<p>The currently selected index.</p>\n<p>Returns <a>pixelate/pixelate_selection_group.SelectionGroup.none</a> if no elements are selected.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"_selectedView":{"name":"_selectedView","qualifiedName":"pixelate/pixelate_tree_view.PolymerElement+SelectionGroup._selectedView","comment":"<p>An immutable view over the selected items.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-collection.UnmodifiableListView","inner":[{"outer":"pixelate_selectable.Selectable","inner":[]}]}],"annotations":[]}},"methods":{"setters":{},"getters":{"customTagName":{"name":"customTagName","qualifiedName":"pixelate/pixelate_tree_view.TreeView.customTagName","comment":"<p>The name of the tag.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"selectableSelectors":{"name":"selectableSelectors","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectableSelectors","comment":"<p>The selectors for the selectable items.</p>","commentFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectableSelectors","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"created":{"name":"created","qualifiedName":"pixelate/pixelate_tree_view.TreeView.TreeView-created","comment":"<p>Create an instance of the <a>pixelate/pixelate_tree_view.TreeView</a> class.</p>\n<p>This constructor should not be called directly. Instead use the\n<a>pixelate/pixelate_tree_view.Element.Element-tag</a> constructor as follows.</p>\n<pre><code>var instance = new Element.tag(TreeView.customTagName);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"collapseAll":{"name":"collapseAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.collapseAll","comment":"<p>Collapses all the nodes in the tree view.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"expandAll":{"name":"expandAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.expandAll","comment":"<p>Expands all the nodes in the tree view.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{"attributes=":{"name":"attributes=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.attributes=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.attributes=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"bindings=":{"name":"bindings=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.bindings=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.bindings=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"children=":{"name":"children=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.children=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.children=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"classes=":{"name":"classes=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.classes=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.classes=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"dataset=":{"name":"dataset=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.dataset=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.dataset=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"eventController=":{"name":"eventController=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.eventController=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.eventController=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"innerHtml=":{"name":"innerHtml=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.innerHtml=","comment":"<p>Parses the HTML fragment and sets it as the contents of this element.</p>\n<p>This uses the default sanitization behavior to sanitize the HTML fragment,\nuse <a>pixelate/pixelate_tree_view.TreeView.setInnerHtml</a> to override the default behavior.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.innerHtml=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"multiple=":{"name":"multiple=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.multiple=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.multiple=","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"nodes=":{"name":"nodes=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.nodes=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.nodes=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"scrollLeft=":{"name":"scrollLeft=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollLeft=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollLeft=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollLeft'"]}]},"scrollTop=":{"name":"scrollTop=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollTop=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollTop=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollTop'"]}]},"selectedIndex=":{"name":"selectedIndex=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectedIndex=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectedIndex=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"selectedItem=":{"name":"selectedItem=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectedItem=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectedItem=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate_selectable.Selectable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"xtag=":{"name":"xtag=","qualifiedName":"pixelate/pixelate_tree_view.TreeView.xtag=","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.xtag=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"_elementPrepared":{"name":"_elementPrepared","qualifiedName":"pixelate/pixelate_tree_view.TreeView._elementPrepared","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer._elementPrepared","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"_name":{"name":"_name","qualifiedName":"pixelate/pixelate_tree_view.TreeView._name","comment":"<p>Retrieves the custom element name. It should be used instead\nof localName, see: https://github.com/Polymer/polymer-dev/issues/26</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer._name","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"_self":{"name":"_self","qualifiedName":"pixelate/pixelate_tree_view.TreeView._self","comment":"<p>Dispatch support so custom HtmlElement's can override these methods.</p>\n<p>A public method like this.bind should not call another public method.</p>\n<p>Instead it should dispatch through <a>pixelate/pixelate_tree_view.TreeView._self</a> to give the \"overridden\" method\na chance to intercept.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.NodeBindExtension._self","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.NodeBindExtension","inner":[]}],"parameters":{},"annotations":[]},"attributes":{"name":"attributes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.attributes","comment":"<p>All attributes on this element.</p>\n<p>Any modifications to the attribute map will automatically be applied to\nthis element.</p>\n<p>This only includes attributes which are not in a namespace\n(such as 'xlink:href'), additional attributes can be accessed via\n<a>pixelate/pixelate_tree_view.TreeView.getNamespacedAttributes</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.attributes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"bindings":{"name":"bindings","qualifiedName":"pixelate/pixelate_tree_view.TreeView.bindings","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.bindings","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"observe-src-bindable.Bindable","inner":[]}]}],"parameters":{},"annotations":[]},"borderEdge":{"name":"borderEdge","qualifiedName":"pixelate/pixelate_tree_view.TreeView.borderEdge","comment":"<p>Access the dimensions and position of this element's content + padding +\nborder box.</p>\n<p>This returns a rectangle with the dimenions actually available for content\nin this element, in pixels, regardless of this element's box-sizing\nproperty. Unlike <a>pixelate/pixelate_tree_view.TreeView.getBoundingClientRect</a>, the dimensions of this rectangle\nwill return the same numerical height if the element is hidden or not. This\ncan be used to retrieve jQuery's\n<a href=\"http://api.jquery.com/outerHeight/\">outerHeight</a> value for an element.</p>\n<p><em>Important</em> <em>note</em>: use of this method <em>will</em> perform CSS calculations that\ncan trigger a browser reflow. Therefore, use of this property <em>during</em> an\nanimation frame is discouraged. See also:\n<a href=\"https://developers.google.com/speed/articles/reflow\">Browser Reflow</a></p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.borderEdge","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssRect","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"changes":{"name":"changes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.changes","comment":"<p>The stream of change records to this object. Records will be delivered\nasynchronously.</p>\n<p><a>pixelate/observe-src-observable.Observable.deliverChanges</a> can be called to force synchronous delivery.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable.changes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"observe-src-change_record.ChangeRecord","inner":[]}]}]}],"parameters":{},"annotations":[]},"children":{"name":"children","qualifiedName":"pixelate/pixelate_tree_view.TreeView.children","comment":"<p>List of the direct children of this element.</p>\n<p>This collection can be used to add and remove elements from the document.</p>\n<pre><code>var item = new DivElement();\nitem.text = 'Something';\ndocument.body.children.add(item) // Item is now displayed on the page.\nfor (var element in document.body.children) {\n  element.style.background = 'red'; // Turns every child of body red.\n}\n</code></pre>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.children","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}]}],"parameters":{},"annotations":[]},"classes":{"name":"classes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.classes","comment":"<p>The set of CSS classes applied to this element.</p>\n<p>This set makes it easy to add, remove or toggle the classes applied to\nthis element.</p>\n<pre><code>element.classes.add('selected');\nelement.classes.toggle('isOnline');\nelement.classes.remove('selected');\n</code></pre>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.classes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssClassSet","inner":[]}],"parameters":{},"annotations":[]},"client":{"name":"client","qualifiedName":"pixelate/pixelate_tree_view.TreeView.client","comment":"<p>Gets the position of this element relative to the client area of the page.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.client","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Rectangle","inner":[]}],"parameters":{},"annotations":[]},"clientHeight":{"name":"clientHeight","qualifiedName":"pixelate/pixelate_tree_view.TreeView.clientHeight","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.clientHeight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientHeight'"]}]},"clientLeft":{"name":"clientLeft","qualifiedName":"pixelate/pixelate_tree_view.TreeView.clientLeft","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.clientLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientLeft'"]}]},"clientTop":{"name":"clientTop","qualifiedName":"pixelate/pixelate_tree_view.TreeView.clientTop","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.clientTop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientTop'"]}]},"clientWidth":{"name":"clientWidth","qualifiedName":"pixelate/pixelate_tree_view.TreeView.clientWidth","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.clientWidth","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.clientWidth'"]}]},"contentEdge":{"name":"contentEdge","qualifiedName":"pixelate/pixelate_tree_view.TreeView.contentEdge","comment":"<p>Access this element's content position.</p>\n<p>This returns a rectangle with the dimenions actually available for content\nin this element, in pixels, regardless of this element's box-sizing\nproperty. Unlike <a>pixelate/pixelate_tree_view.TreeView.getBoundingClientRect</a>, the dimensions of this rectangle\nwill return the same numerical height if the element is hidden or not.</p>\n<p><em>Important</em> <em>note</em>: use of this method <em>will</em> perform CSS calculations that\ncan trigger a browser reflow. Therefore, use of this property <em>during</em> an\nanimation frame is discouraged. See also:\n<a href=\"https://developers.google.com/speed/articles/reflow\">Browser Reflow</a></p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.contentEdge","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssRect","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"dataset":{"name":"dataset","qualifiedName":"pixelate/pixelate_tree_view.TreeView.dataset","comment":"<p>Allows access to all custom data attributes (data-*) set on this element.</p>\n<p>The keys for the map must follow these rules:</p><ul><li>The name must not begin with 'xml'.</li><li>The name cannot contain a semi-colon (';').</li><li>The name cannot contain any capital letters.</li></ul>\n<p>Any keys from markup will be converted to camel-cased keys in the map.</p>\n<p>For example, HTML specified as:</p>\n<pre><code>&lt;div data-my-random-value='value'&gt;&lt;/div&gt;\n</code></pre>\n<p>Would be accessed in Dart as:</p>\n<pre><code>var value = element.dataset['myRandomValue'];\n</code></pre>\n<p>See also:</p><ul><li><a href=\"http://www.w3.org/TR/html5/global-attributes.html#custom-data-attribute\">Custom data attributes</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.dataset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"declaration":{"name":"declaration","qualifiedName":"pixelate/pixelate_tree_view.TreeView.declaration","comment":"<p>Deprecated: use <a>pixelate/polymer.Polymer.element</a> instead.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.declaration","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer.PolymerDeclaration","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/dart-core.deprecated","parameters":[]}]},"documentOffset":{"name":"documentOffset","qualifiedName":"pixelate/pixelate_tree_view.TreeView.documentOffset","comment":"<p>Provides the coordinates of the element relative to the top of the\ndocument.</p>\n<p>This method is the Dart equivalent to jQuery's\n<a href=\"http://api.jquery.com/offset/\">offset</a> method.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.documentOffset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"element":{"name":"element","qualifiedName":"pixelate/pixelate_tree_view.TreeView.element","comment":"<p>The most derived <code>&lt;polymer-element&gt;</code> declaration for this element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.element","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer.PolymerDeclaration","inner":[]}],"parameters":{},"annotations":[]},"eventController":{"name":"eventController","qualifiedName":"pixelate/pixelate_tree_view.TreeView.eventController","comment":"<p>Returns the object that should be used as the event controller for\nevent bindings in this element's template. If set, this will override the\nnormal controller lookup.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.eventController","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"hasBeenAttached":{"name":"hasBeenAttached","qualifiedName":"pixelate/pixelate_tree_view.TreeView.hasBeenAttached","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.hasBeenAttached","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasObservers":{"name":"hasObservers","qualifiedName":"pixelate/pixelate_tree_view.TreeView.hasObservers","comment":"<p>True if this object has any observers, and should call\n<a>pixelate/observe-src-observable.Observable.notifyChange</a> for changes.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable.hasObservers","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"pixelate/pixelate_tree_view.TreeView.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>pixelate/pixelate_tree_view.TreeView.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"innerHtml":{"name":"innerHtml","qualifiedName":"pixelate/pixelate_tree_view.TreeView.innerHtml","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.innerHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"localName":{"name":"localName","qualifiedName":"pixelate/pixelate_tree_view.TreeView.localName","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.localName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.localName'"]}]},"marginEdge":{"name":"marginEdge","qualifiedName":"pixelate/pixelate_tree_view.TreeView.marginEdge","comment":"<p>Access the dimensions and position of this element's content + padding +\nborder + margin box.</p>\n<p>This returns a rectangle with the dimenions actually available for content\nin this element, in pixels, regardless of this element's box-sizing\nproperty. Unlike <a>pixelate/pixelate_tree_view.TreeView.getBoundingClientRect</a>, the dimensions of this rectangle\nwill return the same numerical height if the element is hidden or not. This\ncan be used to retrieve jQuery's\n<a href=\"http://api.jquery.com/outerHeight/\">outerHeight</a> value for an element.</p>\n<p><em>Important</em> <em>note</em>: use of this method will perform CSS calculations that\ncan trigger a browser reflow. Therefore, use of this property <em>during</em> an\nanimation frame is discouraged. See also:\n<a href=\"https://developers.google.com/speed/articles/reflow\">Browser Reflow</a></p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.marginEdge","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssRect","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"multiple":{"name":"multiple","qualifiedName":"pixelate/pixelate_tree_view.TreeView.multiple","comment":"<p>Whether multiple elements can be selected</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.multiple","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"namespaceUri":{"name":"namespaceUri","qualifiedName":"pixelate/pixelate_tree_view.TreeView.namespaceUri","comment":"<p>A URI that identifies the XML namespace of this element.</p>\n<p><code>null</code> if no namespace URI is specified.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeNSname\">Node.namespaceURI</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.namespaceUri","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.namespaceUri'"]}]},"nodes":{"name":"nodes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.nodes","comment":"<p>A modifiable list of this node's children.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.nodes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"parameters":{},"annotations":[]},"offset":{"name":"offset","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offset","comment":"<p>Gets the offset of this element relative to its offsetParent.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Rectangle","inner":[]}],"parameters":{},"annotations":[]},"offsetHeight":{"name":"offsetHeight","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offsetHeight","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offsetHeight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetHeight'"]}]},"offsetLeft":{"name":"offsetLeft","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offsetLeft","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offsetLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetLeft'"]}]},"offsetTop":{"name":"offsetTop","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offsetTop","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offsetTop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetTop'"]}]},"offsetWidth":{"name":"offsetWidth","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offsetWidth","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offsetWidth","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.offsetWidth'"]}]},"on":{"name":"on","qualifiedName":"pixelate/pixelate_tree_view.TreeView.on","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.on","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.ElementEvents","inner":[]}],"parameters":{},"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onabort'"]}]},"onBeforeCopy":{"name":"onBeforeCopy","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onBeforeCopy","comment":"<p>Stream of <code>beforecopy</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onBeforeCopy","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onbeforecopy'"]}]},"onBeforeCut":{"name":"onBeforeCut","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onBeforeCut","comment":"<p>Stream of <code>beforecut</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onBeforeCut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onbeforecut'"]}]},"onBeforePaste":{"name":"onBeforePaste","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onBeforePaste","comment":"<p>Stream of <code>beforepaste</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onBeforePaste","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onbeforepaste'"]}]},"onBlur":{"name":"onBlur","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onBlur","comment":"<p>Stream of <code>blur</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onBlur","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onblur'"]}]},"onChange":{"name":"onChange","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onChange","comment":"<p>Stream of <code>change</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onchange'"]}]},"onClick":{"name":"onClick","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onClick","comment":"<p>Stream of <code>click</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onclick'"]}]},"onContextMenu":{"name":"onContextMenu","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onContextMenu","comment":"<p>Stream of <code>contextmenu</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onContextMenu","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.oncontextmenu'"]}]},"onCopy":{"name":"onCopy","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onCopy","comment":"<p>Stream of <code>copy</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onCopy","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.oncopy'"]}]},"onCut":{"name":"onCut","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onCut","comment":"<p>Stream of <code>cut</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onCut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.oncut'"]}]},"onDoubleClick":{"name":"onDoubleClick","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDoubleClick","comment":"<p>Stream of <code>doubleclick</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDoubleClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondblclick'"]}]},"onDrag":{"name":"onDrag","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDrag","comment":"<p>A stream of <code>drag</code> events fired when this element currently being dragged.</p>\n<p>A <code>drag</code> event is added to this stream as soon as the drag begins.\nA <code>drag</code> event is also added to this stream at intervals while the drag\noperation is still ongoing.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDrag","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondrag'"]}]},"onDragEnd":{"name":"onDragEnd","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDragEnd","comment":"<p>A stream of <code>dragend</code> events fired when this element completes a drag\noperation.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDragEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondragend'"]}]},"onDragEnter":{"name":"onDragEnter","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDragEnter","comment":"<p>A stream of <code>dragenter</code> events fired when a dragged object is first dragged\nover this element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDragEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondragenter'"]}]},"onDragLeave":{"name":"onDragLeave","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDragLeave","comment":"<p>A stream of <code>dragleave</code> events fired when an object being dragged over this\nelement leaves this element's target area.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDragLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondragleave'"]}]},"onDragOver":{"name":"onDragOver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDragOver","comment":"<p>A stream of <code>dragover</code> events fired when a dragged object is currently\nbeing dragged over this element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDragOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondragover'"]}]},"onDragStart":{"name":"onDragStart","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDragStart","comment":"<p>A stream of <code>dragstart</code> events fired when this element starts being\ndragged.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDragStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondragstart'"]}]},"onDrop":{"name":"onDrop","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onDrop","comment":"<p>A stream of <code>drop</code> events fired when a dragged object is dropped on this\nelement.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://github.com/dart-lang/dart-samples/tree/master/web/html5/dnd/basics\">Drag and drop sample</a>\nbased on <a href=\"http://www.html5rocks.com/en/tutorials/dnd/basics/\">the tutorial</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd\">Drag and drop specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onDrop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ondrop'"]}]},"onError":{"name":"onError","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onerror'"]}]},"onFocus":{"name":"onFocus","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onFocus","comment":"<p>Stream of <code>focus</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onFocus","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onfocus'"]}]},"onFullscreenChange":{"name":"onFullscreenChange","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onFullscreenChange","comment":"<p>Stream of <code>fullscreenchange</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onFullscreenChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onwebkitfullscreenchange'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onFullscreenError":{"name":"onFullscreenError","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onFullscreenError","comment":"<p>Stream of <code>fullscreenerror</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onFullscreenError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onwebkitfullscreenerror'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onInput":{"name":"onInput","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onInput","comment":"<p>Stream of <code>input</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onInput","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.oninput'"]}]},"onInvalid":{"name":"onInvalid","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onInvalid","comment":"<p>Stream of <code>invalid</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onInvalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.oninvalid'"]}]},"onKeyDown":{"name":"onKeyDown","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onKeyDown","comment":"<p>Stream of <code>keydown</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onKeyDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onkeydown'"]}]},"onKeyPress":{"name":"onKeyPress","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onKeyPress","comment":"<p>Stream of <code>keypress</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onKeyPress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onkeypress'"]}]},"onKeyUp":{"name":"onKeyUp","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onKeyUp","comment":"<p>Stream of <code>keyup</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onKeyUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onkeyup'"]}]},"onLoad":{"name":"onLoad","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onload'"]}]},"onMouseDown":{"name":"onMouseDown","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseDown","comment":"<p>Stream of <code>mousedown</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmousedown'"]}]},"onMouseEnter":{"name":"onMouseEnter","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseEnter","comment":"<p>Stream of <code>mouseenter</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmouseenter'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onMouseLeave":{"name":"onMouseLeave","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseLeave","comment":"<p>Stream of <code>mouseleave</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmouseleave'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onMouseMove":{"name":"onMouseMove","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseMove","comment":"<p>Stream of <code>mousemove</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmousemove'"]}]},"onMouseOut":{"name":"onMouseOut","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseOut","comment":"<p>Stream of <code>mouseout</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmouseout'"]}]},"onMouseOver":{"name":"onMouseOver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseOver","comment":"<p>Stream of <code>mouseover</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmouseover'"]}]},"onMouseUp":{"name":"onMouseUp","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseUp","comment":"<p>Stream of <code>mouseup</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmouseup'"]}]},"onMouseWheel":{"name":"onMouseWheel","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMouseWheel","comment":"<p>Stream of <code>mousewheel</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onMouseWheel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.WheelEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onmousewheel'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onPaste":{"name":"onPaste","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onPaste","comment":"<p>Stream of <code>paste</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onPaste","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onpaste'"]}]},"onReset":{"name":"onReset","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onReset","comment":"<p>Stream of <code>reset</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onReset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onreset'"]}]},"onResize":{"name":"onResize","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onResize","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onResize","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onresize'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onScroll":{"name":"onScroll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onScroll","comment":"<p>Stream of <code>scroll</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onScroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onscroll'"]}]},"onSearch":{"name":"onSearch","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onSearch","comment":"<p>Stream of <code>search</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onSearch","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onsearch'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onSelect":{"name":"onSelect","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onSelect","comment":"<p>Stream of <code>select</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onSelect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onselect'"]}]},"onSelectStart":{"name":"onSelectStart","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onSelectStart","comment":"<p>Stream of <code>selectstart</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onSelectStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onselectstart'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onSubmit":{"name":"onSubmit","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onSubmit","comment":"<p>Stream of <code>submit</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.onsubmit'"]}]},"onTouchCancel":{"name":"onTouchCancel","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchCancel","comment":"<p>Stream of <code>touchcancel</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchCancel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchcancel'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTouchEnd":{"name":"onTouchEnd","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchEnd","comment":"<p>Stream of <code>touchend</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchend'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTouchEnter":{"name":"onTouchEnter","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchEnter","comment":"<p>Stream of <code>touchenter</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchenter'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTouchLeave":{"name":"onTouchLeave","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchLeave","comment":"<p>Stream of <code>touchleave</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchleave'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTouchMove":{"name":"onTouchMove","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchMove","comment":"<p>Stream of <code>touchmove</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchmove'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTouchStart":{"name":"onTouchStart","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTouchStart","comment":"<p>Stream of <code>touchstart</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTouchStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontouchstart'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onTransitionEnd":{"name":"onTransitionEnd","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onTransitionEnd","comment":"<p>Stream of <code>transitionend</code> events handled by this <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.onTransitionEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementStream","inner":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.ontransitionend'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]}]},"paddingEdge":{"name":"paddingEdge","qualifiedName":"pixelate/pixelate_tree_view.TreeView.paddingEdge","comment":"<p>Access the dimensions and position of this element's content + padding box.</p>\n<p>This returns a rectangle with the dimenions actually available for content\nin this element, in pixels, regardless of this element's box-sizing\nproperty. Unlike <a>pixelate/pixelate_tree_view.TreeView.getBoundingClientRect</a>, the dimensions of this rectangle\nwill return the same numerical height if the element is hidden or not. This\ncan be used to retrieve jQuery's\n<a href=\"http://api.jquery.com/innerHeight/\">innerHeight</a> value for an element.\nThis is also a rectangle equalling the dimensions of clientHeight and\nclientWidth.</p>\n<p><em>Important</em> <em>note</em>: use of this method <em>will</em> perform CSS calculations that\ncan trigger a browser reflow. Therefore, use of this property <em>during</em> an\nanimation frame is discouraged. See also:\n<a href=\"https://developers.google.com/speed/articles/reflow\">Browser Reflow</a></p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.paddingEdge","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssRect","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"preventDispose":{"name":"preventDispose","qualifiedName":"pixelate/pixelate_tree_view.TreeView.preventDispose","comment":"<p>By default the data bindings will be cleaned up when this custom element\nis detached from the document. Overriding this to return <code>true</code> will\nprevent that from happening.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.preventDispose","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"pixelate/pixelate_tree_view.TreeView.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"scrollHeight":{"name":"scrollHeight","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollHeight","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollHeight","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollHeight'"]}]},"scrollLeft":{"name":"scrollLeft","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollLeft","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollLeft","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollLeft'"]}]},"scrollTop":{"name":"scrollTop","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollTop","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollTop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollTop'"]}]},"scrollWidth":{"name":"scrollWidth","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollWidth","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollWidth","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollWidth'"]}]},"selectableItems":{"name":"selectableItems","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectableItems","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectableItems","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate_selectable.Selectable","inner":[]}]}],"parameters":{},"annotations":[]},"selectableSelectors":{"name":"selectableSelectors","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectableSelectors","comment":"<p>The selectors for the selectable items.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectableSelectors","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"selectedIndex":{"name":"selectedIndex","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectedIndex","comment":"<p>The index of the first currently selected item.</p>\n<p>When <a>pixelate/pixelate_tree_view.TreeView.multiple</a> is true then the setter will remove all existing\nselections. A call to <a>pixelate/pixelate_tree_view.TreeView.selectedItems</a> immediately afterward will return\nan array only containing a single item.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectedIndex","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"selectedItem":{"name":"selectedItem","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectedItem","comment":"<p>The first of the currently selected items.</p>\n<p>When <a>pixelate/pixelate_tree_view.TreeView.multiple</a> is true then the setter will remove all existing\nselections. A call to <a>pixelate/pixelate_tree_view.TreeView.selectedItems</a> immediately afterward will return\nan array only containing a single item.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectedItem","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate_selectable.Selectable","inner":[]}],"parameters":{},"annotations":[]},"selectedItems":{"name":"selectedItems","qualifiedName":"pixelate/pixelate_tree_view.TreeView.selectedItems","comment":"<p>The currently selected items.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.selectedItems","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.UnmodifiableListView","inner":[{"outer":"pixelate_selectable.Selectable","inner":[]}]}],"parameters":{},"annotations":[]},"shadowRoot":{"name":"shadowRoot","qualifiedName":"pixelate/pixelate_tree_view.TreeView.shadowRoot","comment":"<p>The shadow root of this shadow host.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/\">Shadow DOM 101</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/shadow-dom/\">Shadow DOM specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.shadowRoot","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ShadowRoot","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.shadowRoot'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME","'25'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"syntax":{"name":"syntax","qualifiedName":"pixelate/pixelate_tree_view.TreeView.syntax","comment":"<p>Use to override the default syntax for polymer-elements.\nBy default this will be null, which causes <a>pixelate/polymer.Polymer.instanceTemplate</a> to use\nthe template's bindingDelegate or the element.syntax, in that order.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.syntax","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer.PolymerExpressions","inner":[]}],"parameters":{},"annotations":[]},"templateInstance":{"name":"templateInstance","qualifiedName":"pixelate/pixelate_tree_view.TreeView.templateInstance","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.templateInstance","static":false,"abstract":false,"constant":false,"return":[{"outer":"template_binding.TemplateInstance","inner":[]}],"parameters":{},"annotations":[]},"xtag":{"name":"xtag","qualifiedName":"pixelate/pixelate_tree_view.TreeView.xtag","comment":"<p>Experimental support for <a href=\"http://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html\">web components</a>. This field stores a\nreference to the component implementation. It was inspired by Mozilla's\n<a href=\"http://x-tags.org/\">x-tags</a> project. Please note: in the future it may be possible to\n<code>extend Element</code> from your class, in which case this field will be\ndeprecated.</p>\n<p>If xtag has not been set, it will simply return <code>this</code> <a>pixelate/pixelate_tree_view.Element</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.xtag","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"pixelate/pixelate_tree_view.TreeView.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>pixelate/pixelate_tree_view.TreeView.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>pixelate/pixelate_tree_view.TreeView.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"_animate_1":{"name":"_animate_1","qualifiedName":"pixelate/pixelate_tree_view.TreeView._animate_1","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._animate_1","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Animation","inner":[]}],"parameters":{"keyframes":{"name":"keyframes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[]}]}],"value":null,"annotations":[]},"timingInput":{"name":"timingInput","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.animate'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"_animate_2":{"name":"_animate_2","qualifiedName":"pixelate/pixelate_tree_view.TreeView._animate_2","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._animate_2","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Animation","inner":[]}],"parameters":{"keyframes":{"name":"keyframes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[]}]}],"value":null,"annotations":[]},"timingInput":{"name":"timingInput","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.animate'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"_animate_3":{"name":"_animate_3","qualifiedName":"pixelate/pixelate_tree_view.TreeView._animate_3","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._animate_3","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Animation","inner":[]}],"parameters":{"keyframes":{"name":"keyframes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.animate'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"_clearChildren":{"name":"_clearChildren","qualifiedName":"pixelate/pixelate_tree_view.TreeView._clearChildren","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node._clearChildren","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_clearSelections":{"name":"_clearSelections","qualifiedName":"pixelate/pixelate_tree_view.TreeView._clearSelections","comment":"<p>Clears the currently selected items.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup._clearSelections","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_getElementsByTagName":{"name":"_getElementsByTagName","qualifiedName":"pixelate/pixelate_tree_view.TreeView._getElementsByTagName","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._getElementsByTagName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getElementsByTagName'"]}]},"_getSelectableItems":{"name":"_getSelectableItems","qualifiedName":"pixelate/pixelate_tree_view.TreeView._getSelectableItems","comment":"<p>Gets the currently selectable items within the group.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup._getSelectableItems","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_hasAttribute":{"name":"_hasAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView._hasAttribute","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._hasAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.hasAttribute'"]}]},"_hasAttributeNS":{"name":"_hasAttributeNS","qualifiedName":"pixelate/pixelate_tree_view.TreeView._hasAttributeNS","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._hasAttributeNS","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"namespaceURI":{"name":"namespaceURI","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"localName":{"name":"localName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.hasAttributeNS'"]}]},"_initJsObject":{"name":"_initJsObject","qualifiedName":"pixelate/pixelate_tree_view.TreeView._initJsObject","comment":"<p>Initialize JS interop for this element. For now we just initialize the</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer._initJsObject","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"_insertAdjacentElement":{"name":"_insertAdjacentElement","qualifiedName":"pixelate/pixelate_tree_view.TreeView._insertAdjacentElement","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._insertAdjacentElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_insertAdjacentHtml":{"name":"_insertAdjacentHtml","qualifiedName":"pixelate/pixelate_tree_view.TreeView._insertAdjacentHtml","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._insertAdjacentHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_insertAdjacentNode":{"name":"_insertAdjacentNode","qualifiedName":"pixelate/pixelate_tree_view.TreeView._insertAdjacentNode","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._insertAdjacentNode","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_insertAdjacentText":{"name":"_insertAdjacentText","qualifiedName":"pixelate/pixelate_tree_view.TreeView._insertAdjacentText","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._insertAdjacentText","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_maybeUpdateBindings":{"name":"_maybeUpdateBindings","qualifiedName":"pixelate/pixelate_tree_view.TreeView._maybeUpdateBindings","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.NodeBindExtension._maybeUpdateBindings","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"binding":{"name":"binding","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_observed":{"name":"_observed","qualifiedName":"pixelate/pixelate_tree_view.TreeView._observed","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable._observed","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_onMutation":{"name":"_onMutation","qualifiedName":"pixelate/pixelate_tree_view.TreeView._onMutation","comment":"<p>Callback for when a mutation occurs in the element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup._onMutation","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"mutations":{"name":"mutations","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.MutationRecord","inner":[]}]}],"value":null,"annotations":[]},"observer":{"name":"observer","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.MutationObserver","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_onSelection":{"name":"_onSelection","qualifiedName":"pixelate/pixelate_tree_view.TreeView._onSelection","comment":"<p>Callback for when an item is selected.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup._onSelection","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.CustomEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_open":{"name":"_open","qualifiedName":"pixelate/pixelate_tree_view.TreeView._open","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.NodeBindExtension._open","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"bindable":{"name":"bindable","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"_propertyChange":{"name":"_propertyChange","qualifiedName":"pixelate/pixelate_tree_view.TreeView._propertyChange","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer._propertyChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"records":{"name":"records","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"observe-src-change_record.ChangeRecord","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"_querySelectorAll":{"name":"_querySelectorAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView._querySelectorAll","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._querySelectorAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.querySelectorAll'"]}]},"_recordBinding":{"name":"_recordBinding","qualifiedName":"pixelate/pixelate_tree_view.TreeView._recordBinding","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer._recordBinding","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"observer":{"name":"observer","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_removeAttribute":{"name":"_removeAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView._removeAttribute","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._removeAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.removeAttribute'"]}]},"_removeAttributeNS":{"name":"_removeAttributeNS","qualifiedName":"pixelate/pixelate_tree_view.TreeView._removeAttributeNS","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._removeAttributeNS","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"namespaceURI":{"name":"namespaceURI","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"localName":{"name":"localName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.removeAttributeNS'"]}]},"_removeChild":{"name":"_removeChild","qualifiedName":"pixelate/pixelate_tree_view.TreeView._removeChild","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node._removeChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"oldChild":{"name":"oldChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.removeChild'"]}]},"_replaceChild":{"name":"_replaceChild","qualifiedName":"pixelate/pixelate_tree_view.TreeView._replaceChild","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node._replaceChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"newChild":{"name":"newChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"oldChild":{"name":"oldChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.replaceChild'"]}]},"_scrollIntoView":{"name":"_scrollIntoView","qualifiedName":"pixelate/pixelate_tree_view.TreeView._scrollIntoView","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._scrollIntoView","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"alignWithTop":{"name":"alignWithTop","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollIntoView'"]}]},"_scrollIntoViewIfNeeded":{"name":"_scrollIntoViewIfNeeded","qualifiedName":"pixelate/pixelate_tree_view.TreeView._scrollIntoViewIfNeeded","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element._scrollIntoViewIfNeeded","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"centerIfNeeded":{"name":"centerIfNeeded","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollIntoViewIfNeeded'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"_unobserved":{"name":"_unobserved","qualifiedName":"pixelate/pixelate_tree_view.TreeView._unobserved","comment":"<p>Release data associated with observation.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable._unobserved","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"_updateBindings":{"name":"_updateBindings","qualifiedName":"pixelate/pixelate_tree_view.TreeView._updateBindings","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.NodeBindExtension._updateBindings","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"binding":{"name":"binding","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"_updateSelectedIndex":{"name":"_updateSelectedIndex","qualifiedName":"pixelate/pixelate_tree_view.TreeView._updateSelectedIndex","comment":"<p>Determines what the selected index is.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup._updateSelectedIndex","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addEventListener":{"name":"addEventListener","qualifiedName":"pixelate/pixelate_tree_view.TreeView.addEventListener","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"addHostListeners":{"name":"addHostListeners","qualifiedName":"pixelate/pixelate_tree_view.TreeView.addHostListeners","comment":"<p>Attach event listeners on the host (this) element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.addHostListeners","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"animate":{"name":"animate","qualifiedName":"pixelate/pixelate_tree_view.TreeView.animate","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.animate","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Animation","inner":[]}],"parameters":{"keyframes":{"name":"keyframes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[]}]}],"value":null,"annotations":[]},"timingInput":{"name":"timingInput","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.animate'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"append":{"name":"append","qualifiedName":"pixelate/pixelate_tree_view.TreeView.append","comment":"<p>Adds a node to the end of the child <a>pixelate/pixelate_tree_view.TreeView.nodes</a> list of this node.</p>\n<p>If the node already exists in this document, it will be removed from its\ncurrent parent node, then added to this node.</p>\n<p>This method is more efficient than <code>nodes.add</code>, and is the preferred\nway of appending a child node.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.append","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"newChild":{"name":"newChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.appendChild'"]}]},"appendHtml":{"name":"appendHtml","qualifiedName":"pixelate/pixelate_tree_view.TreeView.appendHtml","comment":"<p>Parses the specified text as HTML and adds the resulting node after the\nlast child of this element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.appendHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"appendText":{"name":"appendText","qualifiedName":"pixelate/pixelate_tree_view.TreeView.appendText","comment":"<p>Adds the specified text after the last child of this element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.appendText","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"async":{"name":"async","qualifiedName":"pixelate/pixelate_tree_view.TreeView.async","comment":"<p>Invokes a function asynchronously.\nThis will call <code>Platform.flush()</code> and then call\nwindow.requestAnimationFrame with the provided <a>pixelate/pixelate_tree_view.TreeView.async.method</a> and return the\nresult.</p>\n<p>If you would prefer to run the callback after a given duration, see\nthe <a>pixelate/polymer.Polymer.asyncTimer</a> method.</p>\n<p>If you would like to cancel this, use <a>pixelate/polymer.Polymer.cancelAsync</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.async","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.RequestAnimationFrameCallback","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"asyncFire":{"name":"asyncFire","qualifiedName":"pixelate/pixelate_tree_view.TreeView.asyncFire","comment":"<p>Fire an event asynchronously. See <a>pixelate/polymer.Polymer.async</a> and <a>pixelate/polymer.Polymer.fire</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.asyncFire","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"detail":{"name":"detail","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"toNode":{"name":"toNode","optional":true,"named":true,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"canBubble":{"name":"canBubble","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"asyncTimer":{"name":"asyncTimer","qualifiedName":"pixelate/pixelate_tree_view.TreeView.asyncTimer","comment":"<p>Invokes a function asynchronously.\nThis will call <code>Platform.flush()</code> and then return a <code>new Timer</code>\nwith the provided <a>pixelate/pixelate_tree_view.TreeView.asyncTimer.method</a> and <a>pixelate/pixelate_tree_view.TreeView.asyncTimer.timeout</a>.</p>\n<p>If you would prefer to run the callback using\nwindow.requestAnimationFrame, see the <a>pixelate/polymer.Polymer.async</a> method.</p>\n<p>To cancel, call <a>pixelate/dart-async.Timer.cancel</a> on the result of this method.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.asyncTimer","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Timer","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"timeout":{"name":"timeout","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"asyncUnbindAll":{"name":"asyncUnbindAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.asyncUnbindAll","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.asyncUnbindAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"attached":{"name":"attached","qualifiedName":"pixelate/pixelate_tree_view.TreeView.attached","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.attached","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"attributeChanged":{"name":"attributeChanged","qualifiedName":"pixelate/pixelate_tree_view.TreeView.attributeChanged","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.attributeChanged","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"oldValue":{"name":"oldValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"newValue":{"name":"newValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"attributeToProperty":{"name":"attributeToProperty","qualifiedName":"pixelate/pixelate_tree_view.TreeView.attributeToProperty","comment":"<p>If attribute <a>pixelate/pixelate_tree_view.TreeView.attributeToProperty.name</a> is mapped to a property, deserialize\n<a>pixelate/pixelate_tree_view.TreeView.attributeToProperty.value</a> into that property.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.attributeToProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bind":{"name":"bind","qualifiedName":"pixelate/pixelate_tree_view.TreeView.bind","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.bind","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"bindable":{"name":"bindable","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"oneTime":{"name":"oneTime","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"bindFinished":{"name":"bindFinished","qualifiedName":"pixelate/pixelate_tree_view.TreeView.bindFinished","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.bindFinished","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"bindProperty":{"name":"bindProperty","qualifiedName":"pixelate/pixelate_tree_view.TreeView.bindProperty","comment":"<p>Bind the <a>pixelate/pixelate_tree_view.TreeView.bindProperty.name</a> property in this element to <a>pixelate/pixelate_tree_view.TreeView.bindProperty.bindable</a>. <em>Note</em> in Dart it\nis necessary to also define the field:</p>\n<pre><code>var myProperty;\n\nready() {\n  super.ready();\n  bindProperty(#myProperty,\n      new PathObserver(this, 'myModel.path.to.otherProp'));\n}\n</code></pre>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.bindProperty","static":false,"abstract":false,"constant":false,"return":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"bindable":{"name":"bindable","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-bindable.Bindable","inner":[]}],"value":null,"annotations":[]},"oneTime":{"name":"oneTime","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"blur":{"name":"blur","qualifiedName":"pixelate/pixelate_tree_view.TreeView.blur","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.blur","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.blur'"]}]},"cancelAsync":{"name":"cancelAsync","qualifiedName":"pixelate/pixelate_tree_view.TreeView.cancelAsync","comment":"<p>Cancel an operation scenduled by <a>pixelate/polymer.Polymer.async</a>. This is just shorthand for:</p>\n<pre><code>window.cancelAnimationFrame(id);\n</code></pre>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.cancelAsync","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"cancelUnbindAll":{"name":"cancelUnbindAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.cancelUnbindAll","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.cancelUnbindAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"classFollows":{"name":"classFollows","qualifiedName":"pixelate/pixelate_tree_view.TreeView.classFollows","comment":"<p>Remove <a>pixelate/pixelate_tree_view.TreeView.classFollows.className</a> from <a>pixelate/pixelate_tree_view.TreeView.classFollows.old</a>, add class to <a>pixelate/pixelate_tree_view.TreeView.classFollows.anew</a>, if they exist.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.classFollows","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"anew":{"name":"anew","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]},"old":{"name":"old","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]},"className":{"name":"className","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"click":{"name":"click","qualifiedName":"pixelate/pixelate_tree_view.TreeView.click","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.click","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.click'"]}]},"clone":{"name":"clone","qualifiedName":"pixelate/pixelate_tree_view.TreeView.clone","comment":"<p>Returns a copy of this node.</p>\n<p>If <a>pixelate/pixelate_tree_view.TreeView.clone.deep</a> is <code>true</code>, then all of this node's children and decendents are\ncopied as well. If <a>pixelate/pixelate_tree_view.TreeView.clone.deep</a> is <code>false</code>, then only this node is copied.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode\">Node.cloneNode</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.clone","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"deep":{"name":"deep","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.cloneNode'"]}]},"closeNamedObserver":{"name":"closeNamedObserver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.closeNamedObserver","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.closeNamedObserver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"closeNamedObservers":{"name":"closeNamedObservers","qualifiedName":"pixelate/pixelate_tree_view.TreeView.closeNamedObservers","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.closeNamedObservers","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"closeObserverList":{"name":"closeObserverList","qualifiedName":"pixelate/pixelate_tree_view.TreeView.closeObserverList","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.closeObserverList","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"observers":{"name":"observers","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe-src-bindable.Bindable","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"closeObservers":{"name":"closeObservers","qualifiedName":"pixelate/pixelate_tree_view.TreeView.closeObservers","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.closeObservers","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"pixelate/pixelate_tree_view.TreeView.contains","comment":"<p>Returns true if this node contains the specified node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\">Node.contains</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.contains'"]}]},"copyInstanceAttributes":{"name":"copyInstanceAttributes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.copyInstanceAttributes","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.copyInstanceAttributes","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"createFragment":{"name":"createFragment","qualifiedName":"pixelate/pixelate_tree_view.TreeView.createFragment","comment":"<p>Create a DocumentFragment from the HTML fragment and ensure that it follows\nthe sanitization rules specified by the validator or treeSanitizer.</p>\n<p>If the default validation behavior is too restrictive then a new\nNodeValidator should be created, either extending or wrapping a default\nvalidator and overriding the validation APIs.</p>\n<p>The treeSanitizer is used to walk the generated node tree and sanitize it.\nA custom treeSanitizer can also be provided to perform special validation\nrules but since the API is more complex to implement this is discouraged.</p>\n<p>The returned tree is guaranteed to only contain nodes and attributes which\nare allowed by the provided validator.</p>\n<p>See also:</p><ul><li><a>pixelate/dart-dom-html.NodeValidator</a></li><li><a>pixelate/dart-dom-html.NodeTreeSanitizer</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.createFragment","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"validator":{"name":"validator","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.NodeValidator","inner":[]}],"value":null,"annotations":[]},"treeSanitizer":{"name":"treeSanitizer","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.NodeTreeSanitizer","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"createPropertyObserver":{"name":"createPropertyObserver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.createPropertyObserver","comment":"<p>Set up property observers.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.createPropertyObserver","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"createShadowRoot":{"name":"createShadowRoot","qualifiedName":"pixelate/pixelate_tree_view.TreeView.createShadowRoot","comment":"<p>Creates a new shadow root for this shadow host.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/\">Shadow DOM 101</a>\nfrom HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/shadow-dom/\">Shadow DOM specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.createShadowRoot","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ShadowRoot","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.createShadowRoot'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME","'25'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"deliverChanges":{"name":"deliverChanges","qualifiedName":"pixelate/pixelate_tree_view.TreeView.deliverChanges","comment":"<p>Synchronously deliver pending <a>pixelate/observe-src-observable.Observable.changes</a>. Returns true if any records were\ndelivered, otherwise false.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable.deliverChanges","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"deliverPropertyChanges":{"name":"deliverPropertyChanges","qualifiedName":"pixelate/pixelate_tree_view.TreeView.deliverPropertyChanges","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.deliverPropertyChanges","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"deserializeValue":{"name":"deserializeValue","qualifiedName":"pixelate/pixelate_tree_view.TreeView.deserializeValue","comment":"<p>Convert representation of <a>pixelate/pixelate_tree_view.TreeView.deserializeValue.value</a> based on <a>pixelate/pixelate_tree_view.TreeView.deserializeValue.type</a> and <a>pixelate/pixelate_tree_view.TreeView.deserializeValue.currentValue</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.deserializeValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"currentValue":{"name":"currentValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"detached":{"name":"detached","qualifiedName":"pixelate/pixelate_tree_view.TreeView.detached","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.detached","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"pixelate/pixelate_tree_view.TreeView.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"dispatchMethod":{"name":"dispatchMethod","qualifiedName":"pixelate/pixelate_tree_view.TreeView.dispatchMethod","comment":"<p>Calls methodOrCallback with <a>pixelate/pixelate_tree_view.TreeView.dispatchMethod.args</a> if it is a closure, otherwise, treat\nit as a method name in <a>pixelate/pixelate_tree_view.TreeView.dispatchMethod.object</a>, and invoke it.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.dispatchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"callbackOrMethod":{"name":"callbackOrMethod","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"domReady":{"name":"domReady","qualifiedName":"pixelate/pixelate_tree_view.TreeView.domReady","comment":"<p>domReady can be used to access elements in dom (descendants,\nancestors, siblings) such that the developer is enured to upgrade\nordering. If the element definitions have loaded, domReady\ncan be used to access upgraded elements.</p>\n<p>To use, override this method in your element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.domReady","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"enteredView":{"name":"enteredView","qualifiedName":"pixelate/pixelate_tree_view.TreeView.enteredView","comment":"<p><em>Deprecated</em>: override <a>pixelate/dart-dom-html.Element.attached</a> instead.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.enteredView","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]},{"name":"pixelate/dart-core.deprecated","parameters":[]}]},"fetchTemplate":{"name":"fetchTemplate","qualifiedName":"pixelate/pixelate_tree_view.TreeView.fetchTemplate","comment":"<p>Return a shadow-root template (if desired), override for custom behavior.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.fetchTemplate","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"parameters":{"elementElement":{"name":"elementElement","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"findStyleScope":{"name":"findStyleScope","qualifiedName":"pixelate/pixelate_tree_view.TreeView.findStyleScope","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.findStyleScope","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"node":{"name":"node","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fire":{"name":"fire","qualifiedName":"pixelate/pixelate_tree_view.TreeView.fire","comment":"<p>Fire a <a>pixelate/dart-dom-html.CustomEvent</a> targeting <a>pixelate/pixelate_tree_view.TreeView.fire.onNode</a>, or <code>this</code> if onNode is not\nsupplied. Returns the new event.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.fire","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CustomEvent","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"detail":{"name":"detail","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"onNode":{"name":"onNode","optional":true,"named":true,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"canBubble":{"name":"canBubble","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"cancelable":{"name":"cancelable","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"focus":{"name":"focus","qualifiedName":"pixelate/pixelate_tree_view.TreeView.focus","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.focus","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.focus'"]}]},"getAttribute":{"name":"getAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getAttribute","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getAttribute'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"getAttributeNS":{"name":"getAttributeNS","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getAttributeNS","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getAttributeNS","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"namespaceURI":{"name":"namespaceURI","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"localName":{"name":"localName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getAttributeNS'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"getBoundingClientRect":{"name":"getBoundingClientRect","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getBoundingClientRect","comment":"<p>Returns the smallest bounding rectangle that encompasses this element's\npadding, scrollbar, and border.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.getBoundingClientRect\">Element.getBoundingClientRect</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#the-getclientrects-and-getboundingclientrect-methods\">The getBoundingClientRect() method</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getBoundingClientRect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Rectangle","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getBoundingClientRect'"]}]},"getClientRects":{"name":"getClientRects","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getClientRects","comment":"<p>Returns a list of bounding rectangles for each box associated with this\nelement.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.getClientRects\">Element.getClientRects</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#the-getclientrects-and-getboundingclientrect-methods\">The getClientRects() method</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getClientRects","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-math.Rectangle","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getClientRects'"]}]},"getComputedStyle":{"name":"getComputedStyle","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getComputedStyle","comment":"<p>The set of all CSS values applied to this element, including inherited\nand default values.</p>\n<p>The computedStyle contains values that are inherited from other\nsources, such as parent elements or stylesheets. This differs from the\n<a>pixelate/dart-dom-html.Element.style</a> property, which contains only the values specified directly on this\nelement.</p>\n<p>PseudoElement can be values such as <code>::after</code>, <code>::before</code>, <code>::marker</code>,\n<code>::line-marker</code>.</p>\n<p>See also:</p><ul><li><a href=\"http://docs.webplatform.org/wiki/tutorials/inheritance_and_cascade\">CSS Inheritance and Cascade</a></li><li><a href=\"http://docs.webplatform.org/wiki/css/selectors/pseudo-elements\">Pseudo-elements</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getComputedStyle","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CssStyleDeclaration","inner":[]}],"parameters":{"pseudoElement":{"name":"pseudoElement","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getDestinationInsertionPoints":{"name":"getDestinationInsertionPoints","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getDestinationInsertionPoints","comment":"<p>Returns a list of shadow DOM insertion points to which this element is\ndistributed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html\">Shadow DOM specification</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getDestinationInsertionPoints","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getDestinationInsertionPoints'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"getElementsByClassName":{"name":"getElementsByClassName","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getElementsByClassName","comment":"<p>Returns a list of nodes with the given class name inside this element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.getElementsByClassName\">getElementsByClassName</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/domcore/\">DOM specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getElementsByClassName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"parameters":{"classNames":{"name":"classNames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.getElementsByClassName'"]}]},"getNamespacedAttributes":{"name":"getNamespacedAttributes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getNamespacedAttributes","comment":"<p>Gets a map for manipulating the attributes of a particular namespace.</p>\n<p>This is primarily useful for SVG attributes such as xref:link.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.getNamespacedAttributes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{"namespace":{"name":"namespace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getShadowRoot":{"name":"getShadowRoot","qualifiedName":"pixelate/pixelate_tree_view.TreeView.getShadowRoot","comment":"<p><em>Deprecated</em> use <a>pixelate/polymer.Polymer.shadowRoots</a> instead.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.getShadowRoot","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ShadowRoot","inner":[]}],"parameters":{"customTagName":{"name":"customTagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/dart-core.deprecated","parameters":[]}]},"hasChildNodes":{"name":"hasChildNodes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.hasChildNodes","comment":"<p>Returns true if this node has any children.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.hasChildNodes\">Node.hasChildNodes</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.hasChildNodes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.hasChildNodes'"]}]},"initializeSelectionGroup":{"name":"initializeSelectionGroup","qualifiedName":"pixelate/pixelate_tree_view.TreeView.initializeSelectionGroup","comment":"<p>Initializes the behavior.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.initializeSelectionGroup","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"insertAdjacentElement":{"name":"insertAdjacentElement","qualifiedName":"pixelate/pixelate_tree_view.TreeView.insertAdjacentElement","comment":"<p>Inserts <a>pixelate/pixelate_tree_view.TreeView.insertAdjacentElement.element</a> into the DOM at the specified location.</p>\n<p>To see the possible values for <a>pixelate/pixelate_tree_view.TreeView.insertAdjacentElement.where</a>, read the doc for\n<a>pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml</a>.</p>\n<p>See also:</p><ul><li><a>pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.insertAdjacentElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAdjacentHtml":{"name":"insertAdjacentHtml","qualifiedName":"pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml","comment":"<p>Parses text as an HTML fragment and inserts it into the DOM at the\nspecified location.</p>\n<p>The <a>pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml.where</a> parameter indicates where to insert the HTML fragment:</p><ul><li>'beforeBegin': Immediately before this element.</li><li>'afterBegin': As the first child of this element.</li><li>'beforeEnd': As the last child of this element.</li><li>\n<p>'afterEnd': Immediately after this element.</p>\n<p>var html = '&lt;div class=\"something\">content&lt;/div>';\n// Inserts as the first child\ndocument.body.insertAdjacentHtml('afterBegin', html);\nvar createdElement = document.body.children0;\nprint(createdElement.classes0); // Prints 'something'</p></li></ul>\n<p>See also:</p><ul><li><a>pixelate/pixelate_tree_view.TreeView.insertAdjacentText</a></li><li><a>pixelate/pixelate_tree_view.TreeView.insertAdjacentElement</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.insertAdjacentHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAdjacentText":{"name":"insertAdjacentText","qualifiedName":"pixelate/pixelate_tree_view.TreeView.insertAdjacentText","comment":"<p>Inserts text into the DOM at the specified location.</p>\n<p>To see the possible values for <a>pixelate/pixelate_tree_view.TreeView.insertAdjacentText.where</a>, read the doc for\n<a>pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml</a>.</p>\n<p>See also:</p><ul><li><a>pixelate/pixelate_tree_view.TreeView.insertAdjacentHtml</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.insertAdjacentText","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"where":{"name":"where","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertAllBefore":{"name":"insertAllBefore","qualifiedName":"pixelate/pixelate_tree_view.TreeView.insertAllBefore","comment":"<p>Inserts all of the nodes into this node directly before refChild.</p>\n<p>See also:</p><ul><li><a>pixelate/pixelate_tree_view.TreeView.insertBefore</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.insertAllBefore","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"newNodes":{"name":"newNodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}]}],"value":null,"annotations":[]},"refChild":{"name":"refChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertBefore":{"name":"insertBefore","qualifiedName":"pixelate/pixelate_tree_view.TreeView.insertBefore","comment":"<p>Inserts all of the nodes into this node directly before refChild.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.insertBefore\">Node.insertBefore</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.insertBefore","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"newChild":{"name":"newChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"refChild":{"name":"refChild","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.insertBefore'"]}]},"installControllerStyles":{"name":"installControllerStyles","qualifiedName":"pixelate/pixelate_tree_view.TreeView.installControllerStyles","comment":"<p>Installs external stylesheets and &lt;style> elements with the attribute\npolymer-scope='controller' into the scope of element. This is intended\nto be called during custom element construction.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.installControllerStyles","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"installScopeCssText":{"name":"installScopeCssText","qualifiedName":"pixelate/pixelate_tree_view.TreeView.installScopeCssText","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.installScopeCssText","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"cssText":{"name":"cssText","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"scope":{"name":"scope","optional":true,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"installScopeStyle":{"name":"installScopeStyle","qualifiedName":"pixelate/pixelate_tree_view.TreeView.installScopeStyle","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.installScopeStyle","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"style":{"name":"style","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"scope":{"name":"scope","optional":true,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"instanceTemplate":{"name":"instanceTemplate","qualifiedName":"pixelate/pixelate_tree_view.TreeView.instanceTemplate","comment":"<p>Creates the document fragment to use for each instance of the custom\nelement, given the <code>&lt;template&gt;</code> node. By default this is equivalent to:</p>\n<pre><code>templateBind(template).createInstance(this, polymerSyntax);\n</code></pre>\n<p>Where polymerSyntax is a singleton <a>pixelate/polymer.PolymerExpressions</a> instance.</p>\n<p>You can override this method to change the instantiation behavior of the\ntemplate, for example to use a different data-binding syntax.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.instanceTemplate","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"invokeMethod":{"name":"invokeMethod","qualifiedName":"pixelate/pixelate_tree_view.TreeView.invokeMethod","comment":"<p>Call <a>pixelate/pixelate_tree_view.TreeView.invokeMethod.methodName</a> method on this object with <a>pixelate/pixelate_tree_view.TreeView.invokeMethod.args</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.invokeMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"methodName":{"name":"methodName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"args":{"name":"args","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"leftView":{"name":"leftView","qualifiedName":"pixelate/pixelate_tree_view.TreeView.leftView","comment":"<p><em>Deprecated</em>: override <a>pixelate/dart-dom-html.Element.detached</a> instead.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.leftView","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]},{"name":"pixelate/dart-core.deprecated","parameters":[]}]},"lightFromTemplate":{"name":"lightFromTemplate","qualifiedName":"pixelate/pixelate_tree_view.TreeView.lightFromTemplate","comment":"<p>Utility function that stamps a <code>&lt;template&gt;</code> into light-dom.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.lightFromTemplate","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]},"refNode":{"name":"refNode","optional":true,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"makeElementReady":{"name":"makeElementReady","qualifiedName":"pixelate/pixelate_tree_view.TreeView.makeElementReady","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.makeElementReady","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"marshalNodeReferences":{"name":"marshalNodeReferences","qualifiedName":"pixelate/pixelate_tree_view.TreeView.marshalNodeReferences","comment":"<p>Locate nodes with id and store references to them in <a>pixelate/polymer.Polymer.$</a> hash.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.marshalNodeReferences","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"root":{"name":"root","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"matches":{"name":"matches","qualifiedName":"pixelate/pixelate_tree_view.TreeView.matches","comment":"<p>Checks if this element matches the CSS selectors.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.matches","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"matchesWithAncestors":{"name":"matchesWithAncestors","qualifiedName":"pixelate/pixelate_tree_view.TreeView.matchesWithAncestors","comment":"<p>Checks if this element or any of its parents match the CSS selectors.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.matchesWithAncestors","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"multipleChanged":{"name":"multipleChanged","qualifiedName":"pixelate/pixelate_tree_view.TreeView.multipleChanged","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.multipleChanged","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"oldValue":{"name":"oldValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"pixelate/pixelate_tree_view.TreeView.noSuchMethod","comment":"<p><a>pixelate/pixelate_tree_view.TreeView.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>pixelate/pixelate_tree_view.TreeView.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>pixelate/pixelate_tree_view.TreeView.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>pixelate/pixelate_tree_view.TreeView.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notifyChange":{"name":"notifyChange","qualifiedName":"pixelate/pixelate_tree_view.TreeView.notifyChange","comment":"<p>Notify observers of a change.</p>\n<p>For most objects <a>pixelate/observe-src-observable.Observable.notifyPropertyChange</a> is more convenient, but\ncollections sometimes deliver other types of changes such as a\n<a>pixelate/observe-src-list_diff.ListChangeRecord</a>.</p>\n<p>Notes:\n- This is <em>not</em> required for fields if you mixin or extend <a>pixelate/pixelate_tree_view.Observable</a>,\n  but you can use it for computed properties.\n- Unlike <a>pixelate/observe-src-change_notifier.ChangeNotifier</a> this will not schedule <a>pixelate/observe-src-observable.Observable.deliverChanges</a>; use\n  <a>pixelate/observe-src-observable.Observable.dirtyCheck</a> instead.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable.notifyChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"record":{"name":"record","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-change_record.ChangeRecord","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notifyPropertyChange":{"name":"notifyPropertyChange","qualifiedName":"pixelate/pixelate_tree_view.TreeView.notifyPropertyChange","comment":"<p>Notify that the field name of this object has been changed.</p>\n<p>The <a>pixelate/pixelate_tree_view.TreeView.notifyPropertyChange.oldValue</a> and <a>pixelate/pixelate_tree_view.TreeView.notifyPropertyChange.newValue</a> are also recorded. If the two values are\nequal, no change will be recorded.</p>\n<p>For convenience this returns <a>pixelate/pixelate_tree_view.TreeView.notifyPropertyChange.newValue</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer+Observable.notifyPropertyChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"field":{"name":"field","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Symbol","inner":[]}],"value":null,"annotations":[]},"oldValue":{"name":"oldValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"newValue":{"name":"newValue","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notifyPropertyChanges":{"name":"notifyPropertyChanges","qualifiedName":"pixelate/pixelate_tree_view.TreeView.notifyPropertyChanges","comment":"<p>Responds to property changes on this element.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.notifyPropertyChanges","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newValues":{"name":"newValues","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"oldValues":{"name":"oldValues","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":null,"annotations":[]},"paths":{"name":"paths","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"observeArrayValue":{"name":"observeArrayValue","qualifiedName":"pixelate/pixelate_tree_view.TreeView.observeArrayValue","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.observeArrayValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"observe-src-path_observer.PropertyPath","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"old":{"name":"old","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"offsetTo":{"name":"offsetTo","qualifiedName":"pixelate/pixelate_tree_view.TreeView.offsetTo","comment":"<p>Provides the offset of this element's <a>pixelate/pixelate_tree_view.TreeView.borderEdge</a> relative to the\nspecified <a>pixelate/pixelate_tree_view.TreeView.offsetTo.parent</a>.</p>\n<p>This is the Dart equivalent of jQuery's\n<a href=\"http://api.jquery.com/position/\">position</a> method. Unlike jQuery's\nposition, however, <a>pixelate/pixelate_tree_view.TreeView.offsetTo.parent</a> can be any parent element of <code>this</code>,\nrather than only <code>this</code>'s immediate <a>pixelate/dart-dom-html.Element.offsetParent</a>. If the specified\nelement is <em>not</em> an offset parent or transitive offset parent to this\nelement, an <a>dart-core.ArgumentError</a> is thrown.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.offsetTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.Experimental","parameters":[]}]},"onMutation":{"name":"onMutation","qualifiedName":"pixelate/pixelate_tree_view.TreeView.onMutation","comment":"<p>Returns a future when <code>node</code> changes, or when its children or subtree\nchanges.</p>\n<p>Use <a>pixelate/dart-dom-html.MutationObserver</a> if you want to listen to a stream of changes.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.onMutation","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.MutationRecord","inner":[]}]}]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"openPropertyObserver":{"name":"openPropertyObserver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.openPropertyObserver","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.openPropertyObserver","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"parseDeclaration":{"name":"parseDeclaration","qualifiedName":"pixelate/pixelate_tree_view.TreeView.parseDeclaration","comment":"<p>Parse input <code>&lt;polymer-element&gt;</code> as needed, override for custom behavior.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.parseDeclaration","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"elementElement":{"name":"elementElement","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseDeclarations":{"name":"parseDeclarations","qualifiedName":"pixelate/pixelate_tree_view.TreeView.parseDeclarations","comment":"<p>Recursive ancestral &lt;element> initialization, oldest first.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.parseDeclarations","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"declaration":{"name":"declaration","optional":false,"named":false,"default":false,"type":[{"outer":"polymer.PolymerDeclaration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"polymerCreated":{"name":"polymerCreated","qualifiedName":"pixelate/pixelate_tree_view.TreeView.polymerCreated","comment":"<p>If this class is used as a mixin, this method must be called from inside\nof the <code>created()</code> constructor.</p>\n<p>If this class is a superclass, calling <code>super.created()</code> is sufficient.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.polymerCreated","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"prepareElement":{"name":"prepareElement","qualifiedName":"pixelate/pixelate_tree_view.TreeView.prepareElement","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.prepareElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"propertyForAttribute":{"name":"propertyForAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView.propertyForAttribute","comment":"<p>Return the published property matching name, or null.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.propertyForAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"smoke.Declaration","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"pixelate/pixelate_tree_view.TreeView.query","comment":"<p>Alias for <a>pixelate/pixelate_tree_view.TreeView.querySelector</a>. Note this function is deprecated because its\nsemantics will be changing in the future.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.query","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"parameters":{"relativeSelectors":{"name":"relativeSelectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/dart-core.deprecated","parameters":[]},{"name":"pixelate/metadata.DomName","parameters":["'Element.querySelector'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"queryAll":{"name":"queryAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.queryAll","comment":"<p>Alias for <a>pixelate/dart-dom-html.Element.querySelectorAll</a>. Note this function is deprecated because its\nsemantics will be changing in the future.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.queryAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementList","inner":[]}],"parameters":{"relativeSelectors":{"name":"relativeSelectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/dart-core.deprecated","parameters":[]},{"name":"pixelate/metadata.DomName","parameters":["'Element.querySelectorAll'"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"querySelector":{"name":"querySelector","qualifiedName":"pixelate/pixelate_tree_view.TreeView.querySelector","comment":"<p>Finds the first descendant element of this element that matches the\nspecified group of selectors.</p>\n<p><a>pixelate/pixelate_tree_view.TreeView.querySelector.selectors</a> should be a string using CSS selector syntax.</p>\n<pre><code>// Gets the first descendant with the class 'classname'\nvar element = element.querySelector('.className');\n// Gets the element with id 'id'\nvar element = element.querySelector('#id');\n// Gets the first descendant [ImageElement]\nvar img = element.querySelector('img');\n</code></pre>\n<p>For details about CSS selector syntax, see the\n<a href=\"http://www.w3.org/TR/css3-selectors/\">CSS selector specification</a>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.querySelector","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.querySelector'"]}]},"querySelectorAll":{"name":"querySelectorAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.querySelectorAll","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.PolymerElement+SelectionGroup.querySelectorAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-dom-html.ElementList","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ready":{"name":"ready","qualifiedName":"pixelate/pixelate_tree_view.TreeView.ready","comment":"<p>Called when <a>pixelate/polymer.Polymer.prepareElement</a> is finished.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.ready","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reflectPropertyToAttribute":{"name":"reflectPropertyToAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView.reflectPropertyToAttribute","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.reflectPropertyToAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerNamedObserver":{"name":"registerNamedObserver","qualifiedName":"pixelate/pixelate_tree_view.TreeView.registerNamedObserver","comment":"<p>Bookkeeping observers for memory management.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.registerNamedObserver","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"sub":{"name":"sub","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.StreamSubscription","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"registerObservers":{"name":"registerObservers","qualifiedName":"pixelate/pixelate_tree_view.TreeView.registerObservers","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.registerObservers","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"observers":{"name":"observers","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"observe-src-bindable.Bindable","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"pixelate/pixelate_tree_view.TreeView.remove","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.ChildNode.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"pixelate/pixelate_tree_view.TreeView.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"replaceWith":{"name":"replaceWith","qualifiedName":"pixelate/pixelate_tree_view.TreeView.replaceWith","comment":"<p>Replaces this node with another node.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Node.replaceWith","static":false,"abstract":false,"constant":false,"return":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"parameters":{"otherNode":{"name":"otherNode","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Node.replaceChild'"]}]},"requestFullscreen":{"name":"requestFullscreen","qualifiedName":"pixelate/pixelate_tree_view.TreeView.requestFullscreen","comment":"<p>Displays this element fullscreen.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/tutorials/using_the_full-screen_api\">Using the fullscreen API</a>\ntutorial from WebPlatform.org.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/fullscreen/\">Fullscreen specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.requestFullscreen","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.webkitRequestFullscreen'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"requestPointerLock":{"name":"requestPointerLock","qualifiedName":"pixelate/pixelate_tree_view.TreeView.requestPointerLock","comment":"<p>Locks the mouse pointer to this element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/pointerlock/intro/\">Pointer lock and first person shooter controls</a> tutorial from\nHTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/pointerlock/\">Pointer lock specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.requestPointerLock","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.webkitRequestPointerLock'"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"pixelate/metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]},{"name":"pixelate/metadata.Experimental","parameters":[]}]},"scheduleJob":{"name":"scheduleJob","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scheduleJob","comment":"<p>Invoke <a>pixelate/pixelate_tree_view.TreeView.scheduleJob.callback</a> in <a>pixelate/pixelate_tree_view.TreeView.scheduleJob.wait</a>, unless the job is re-registered,\nwhich resets the timer. If <a>pixelate/pixelate_tree_view.TreeView.scheduleJob.wait</a> is not supplied, this will use\nwindow.requestAnimationFrame instead of a <a>pixelate/dart-async.Timer</a>.</p>\n<p>For example:</p>\n<pre><code>_myJob = Polymer.scheduleJob(_myJob, callback);\n</code></pre>\n<p>Returns the newly created job.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.scheduleJob","static":false,"abstract":false,"constant":false,"return":[{"outer":"polymer.PolymerJob","inner":[]}],"parameters":{"job":{"name":"job","optional":false,"named":false,"default":false,"type":[{"outer":"polymer.PolymerJob","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{}}},"wait":{"name":"wait","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scopeHasNamedStyle":{"name":"scopeHasNamedStyle","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scopeHasNamedStyle","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.scopeHasNamedStyle","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scrollByLines":{"name":"scrollByLines","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollByLines","comment":"<p>Scrolls the element by a number of lines.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollByLines\">scrollByLines</a> from WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollByLines","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"lines":{"name":"lines","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollByLines'"]}]},"scrollByPages":{"name":"scrollByPages","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollByPages","comment":"<p>Scrolls the element by a number of pages.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollByPages\">scrollByPages</a> from WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollByPages","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"pages":{"name":"pages","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.scrollByPages'"]}]},"scrollIntoView":{"name":"scrollIntoView","qualifiedName":"pixelate/pixelate_tree_view.TreeView.scrollIntoView","comment":"<p>Scrolls this element into view.</p>\n<p>Only one of of the alignment options may be specified at a time.</p>\n<p>If no options are specified then this will attempt to scroll the minimum\namount needed to bring the element into view.</p>\n<p>Note that alignCenter is currently only supported on WebKit platforms. If\nalignCenter is specified but not supported then this will fall back to\nalignTop.</p>\n<p>See also:</p><ul><li><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollIntoView\">scrollIntoView</a></li><li><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollIntoViewIfNeeded\">scrollIntoViewIfNeeded</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.scrollIntoView","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"alignment":{"name":"alignment","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.ScrollAlignment","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"serializeValue":{"name":"serializeValue","qualifiedName":"pixelate/pixelate_tree_view.TreeView.serializeValue","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.serializeValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setAttribute":{"name":"setAttribute","qualifiedName":"pixelate/pixelate_tree_view.TreeView.setAttribute","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.setAttribute","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.setAttribute'"]}]},"setAttributeNS":{"name":"setAttributeNS","qualifiedName":"pixelate/pixelate_tree_view.TreeView.setAttributeNS","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.setAttributeNS","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"namespaceURI":{"name":"namespaceURI","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"qualifiedName":{"name":"qualifiedName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"pixelate/metadata.DomName","parameters":["'Element.setAttributeNS'"]}]},"setInnerHtml":{"name":"setInnerHtml","qualifiedName":"pixelate/pixelate_tree_view.TreeView.setInnerHtml","comment":"<p>Parses the HTML fragment and sets it as the contents of this element.\nThis ensures that the generated content follows the sanitization rules\nspecified by the validator or treeSanitizer.</p>\n<p>If the default validation behavior is too restrictive then a new\nNodeValidator should be created, either extending or wrapping a default\nvalidator and overriding the validation APIs.</p>\n<p>The treeSanitizer is used to walk the generated node tree and sanitize it.\nA custom treeSanitizer can also be provided to perform special validation\nrules but since the API is more complex to implement this is discouraged.</p>\n<p>The resulting tree is guaranteed to only contain nodes and attributes which\nare allowed by the provided validator.</p>\n<p>See also:</p><ul><li><a>pixelate/dart-dom-html.NodeValidator</a></li><li><a>pixelate/dart-dom-html.NodeTreeSanitizer</a></li></ul>","commentFrom":"","inheritedFrom":"pixelate_tree_view.Element.setInnerHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"validator":{"name":"validator","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.NodeValidator","inner":[]}],"value":null,"annotations":[]},"treeSanitizer":{"name":"treeSanitizer","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.NodeTreeSanitizer","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shadowFromTemplate":{"name":"shadowFromTemplate","qualifiedName":"pixelate/pixelate_tree_view.TreeView.shadowFromTemplate","comment":"<p>Utility function that creates a shadow root from a <code>&lt;template&gt;</code>.</p>\n<p>The base implementation will return a <a>pixelate/dart-dom-html.ShadowRoot</a>, but you can replace it\nwith your own code and skip ShadowRoot creation. In that case, you should\nreturn <code>null</code>.</p>\n<p>In your overridden method, you can use <a>pixelate/polymer.Polymer.instanceTemplate</a> to stamp the\ntemplate and initialize data binding, and <a>pixelate/polymer.Polymer.shadowRootReady</a> to intialize\nother Polymer features like event handlers. It is fine to call\nshadowRootReady with a node other than a ShadowRoot such as with <code>this</code>.</p>","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.shadowFromTemplate","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ShadowRoot","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Element","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"shadowRootReady":{"name":"shadowRootReady","qualifiedName":"pixelate/pixelate_tree_view.TreeView.shadowRootReady","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.shadowRootReady","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"root":{"name":"root","optional":false,"named":false,"default":false,"type":[{"outer":"pixelate/pixelate_tree_view.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"takeAttributes":{"name":"takeAttributes","qualifiedName":"pixelate/pixelate_tree_view.TreeView.takeAttributes","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.takeAttributes","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"pixelate/pixelate_tree_view.TreeView.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"unbindAll":{"name":"unbindAll","qualifiedName":"pixelate/pixelate_tree_view.TreeView.unbindAll","comment":"","commentFrom":"","inheritedFrom":"pixelate_tree_view.HtmlElement+Polymer.unbindAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"pixelate/polymer.CustomTag","parameters":["_tagName"]}],"generics":{}}